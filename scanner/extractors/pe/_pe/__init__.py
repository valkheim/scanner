import errno
import functools
import itertools
import time
import typing as T

import lief
import pefile
from _pe.packers import PACKER_SECTIONS
from _pe.rich_header import (
    KNOWN_PRODUCT_IDS,
    vs_version,
    vs_version_fallback,
)

ANTIDEBUG_IMPORTS = {
    "kernel32.dll": {
        "IsDebuggerPresent",
        "RegisterApplicationRestart",
        "RegisterApplicationRecoveryCallback",
        "ApplicationRecoveryInProgress",
        "ApplicationRecoveryFinished",
        "GetThreadSelectorEntry",
        "RtlCaptureStackBackTrace",
        "RegisterEventSource",
        "RegisterHotKey",
        "FatalAppExit",
        "ContinueDebugEvent",
        "DebugActiveProcessStop",
        "SetDebugErrorLevel",
        "DebugActiveProcess",
        "DebugBreak",
        "FlushInstructionCache",
        "CheckRemoteDebuggerPresent",
        "RtlLookupFunctionEntry",
        "OutputDebugString",
        "RtlPcToFileHeader",
    },
    "shlwapi.dll": {
        "OutputDebugStringWrap",
    },
    "loadperf.dll": {
        "LoadPerfCounterTextStrings",
        "UnloadPerfCounterTextStrings",
    },
    "ntdll.dll": {
        "DbgUiConnectToDbg",
        "DbgUiDebugActiveProcess",
        "DbgPrint",
        "DbgPrintEx",
        "QueryTrace",
        "EtwLogTraceEvent",
        "EtwEventWrite",
        "EtwEventEnabled",
        "EtwEventRegister",
        "EtwEventUnregister",
        "EtwUnregisterTraceGuids",
        "EtwRegisterTraceGuids",
        "EtwGetTraceLoggerHandle",
        "EtwGetTraceEnableLevel",
        "EtwGetTraceEnableFlags",
        "EtwTraceMessage",
        "NtGetContextThread",
        "WerReportSQMEvent",
        "WerRegisterMemoryBlock",
        "WerUnregisterMemoryBlock",
    },
    "advapi32.dll": {
        "EventRegister",
        "EventSetInformation",
        "EventUnregister",
        "EventWriteTransfer",
        "ElfOpenEventLog",
        "ElfReadEventLog",
        "ElfReportEvent",
        "ElfReportEventAndSource",
        "BackupEventLog",
        "ClearEventLog",
        "CloseEventLog",
        "DeregisterEventSource",
        "GetEventLogInformation",
        "GetNumberOfEventLogRecords",
        "GetOldestEventLogRecord",
        "NotifyChangeEventLog",
        "OpenBackupEventLog",
        "OpenEventLog",
        "ReadEventLog",
        "RegisterEventSource",
        "ReportEvent",
        "SaferRecordEventLogEntry",
        "StartTrace",
        "CloseTrace",
        "ProcessTrace",
        "FlushTrace",
        "OpenTrace",
        "QueryAllTraces",
        "LockServiceDatabase",
        "GetNumberOfEventLogRecords",
        "GetOldestEventLogRecord",
        "BackupEventLog",
        "NotifyChangeEventLog",
        "DeregisterEventSource",
        "ReportEvent",
        "GetTraceEnableLevel",
    },
    "psapi.dll": {
        "EmptyWorkingSet",
        "EnumDeviceDrivers",
        "EnumPageFiles",
        "GetMappedFileName",
        "GetDeviceDriverBaseName",
        "GetDeviceDriverBaseName",
        "GetDeviceDriverFileName",
        "GetMappedFileName",
        "GetModuleInformation",
        "GetPerformanceInfo",
        "RtlImageNtHeader",
        "RtlImageDirectoryEntryToData",
    },
    "mspdb80.dll": {
        "PDBOpenValidate5",
    },
    "imagehlp.dll": {
        "UpdateDebugInfoFileEx",
        "CheckSumMappedFile",
        "EnumerateLoadedModulesW64",
        "ImageNtHeader",
        "ImageRvaToVa",
        "StackWalk64",
        "SymCleanup",
        "SymFromAddr",
        "SymFunctionTableAccess64",
        "SymGetModuleInfo64",
        "SymGetModuleBase64",
        "SymGetModuleInfoW64",
        "SymGetOptions",
        "SymGetSymFromName",
        "SymInitialize",
        "SymLoadModule64",
        "SymRegisterCallback64",
        "SymSetOptions",
        "SymUnloadModule64",
        "SymAddSourceStream",
        "SymEnumSourceFileTokens",
        "SymEnumSourceFiles",
        "SymGetSourceFileFromToken",
        "SymGetSourceFileToken",
        "SymGetSourceVarFromToken",
        "SymMatchString",
        "SymRegisterCallbackW64",
        "SymSetHomeDirectory",
        "SymSrvGetFileIndexes",
        "RemoveRelocations",
        "BindImage",
        "BindImageEx",
        "CheckSumMappedFile",
        "EnumerateLoadedModules64",
        "EnumerateLoadedModules",
        "EnumerateLoadedModulesEx",
        "FindDebugInfoFile",
        "FindDebugInfoFileEx",
        "FindExecutableImage",
        "FindExecutableImageEx",
        "FindFileInPath",
        "FindFileInSearchPath",
        "GetImageConfigInformation",
        "GetImageUnusedHeaderBytes",
        "GetTimestampForLoadedLibrary",
        "ImageAddCertificate",
        "ImageDirectoryEntryToData",
        "ImageDirectoryEntryToDataEx",
        "ImageEnumerateCertificates",
        "ImageGetCertificateData",
        "ImageGetCertificateHeader",
        "ImageGetDigestStream",
        "ImageLoad",
        "ImageRemoveCertificate",
        "ImageRvaToSection",
        "ImageUnload",
        "ImagehlpApiVersion",
        "ImagehlpApiVersionEx",
        "MakeSureDirectoryPathExists",
        "MapAndLoad",
        "MapDebugInformation",
        "MapFileAndCheckSum",
        "ReBaseImage64",
        "ReBaseImage",
        "RemovePrivateCvSymbolic",
        "RemovePrivateCvSymbolicEx",
        "SearchTreeForFile",
        "SetImageConfigInformation",
        "SplitSymbols",
        "StackWalk",
        "SymEnumSym",
        "TouchFileTimes",
        "UnDecorateSymbolName",
        "UnMapAndLoad",
        "UnmapDebugInformation",
        "UpdateDebugInfoFile",
    },
    "dbghelp.dll": {
        "EnumDirTree",
        "SymFromAddr",
        "SymGetModuleBase64",
        "SymFunctionTableAccess64",
        "SymCleanup",
        "StackWalk64",
        "SymInitialize",
        "SymFunctionTableAccess64",
        "SymGetModuleBase64",
        "StackWalk64",
        "ImageNtHeader",
        "SymUnloadModule64",
        "SymLoadModule64",
        "SymLoadModuleEx",
        "SymGetOptions",
        "SymSetOptions",
        "MiniDumpWriteDump",
        "SymGetSymFromName",
        "SymFromAddr",
        "SymCleanup",
        "SymGetModuleInfoW64",
        "SymRegisterCallback64",
        "EnumerateLoadedModules",
        "EnumerateLoadedModulesW64",
        "SymInitialize",
        "ImageDirectoryEntryToData",
        "SymEnumSym",
        "SymEnumerateSymbolsW",
        "MapDebugInformation",
        "SymEnumerateSymbols64",
        "SymGetSymFromAddr64",
        "SymGetSymFromName64",
        "SymGetSymNext64",
        "SymGetSymPrev64",
        "UnMapDebugInformation",
    },
}

KEYBOARD_IMPORTS = {
    "kernel32.dll": {
        "keybd_event",
        "CreateAcceleratorTable",
        "DestroyAcceleratorTable",
        "LoadKeyboardLayout",
        "UnregisterHotKey",
        "SendInput",
        "SetActiveWindow",
        "SetFocus",
        "CopyAcceleratorTable",
        "GetKeyboardState",
        "GetKeyboardType",
        "GetKeyNameText",
        "BlockInput",
        "SetKeyboardState",
        "UnloadKeyboardLayout",
        "TranslateAccelerator",
        "LoadAccelerators",
        "GetAsyncKeyState",
        "GetKBCodePage",
        "GetKeyboardLayout",
        "GetKeyboardLayoutList",
        "GetKeyboardLayoutName",
        "GetFocus",
        "GetKeyState",
        "EnableWindow",
        "GetActiveWindow",
        "MapVirtualKey",
    },
    "user32.dll": {
        "IsWindowEnabled",
        "ActivateKeyboardLayout",
        "VkKeyScanEx",
        "MapVirtualKeyEx",
        "GetLastInputInfo",
        "OemKeyScan",
        "RegisterRawInputDevices",
        "GetRawInputData",
        "VkKeyScan",
    },
}

SUSPICIOUS_IMPORTS = {
    "samlib.dll": {
        "SamEnumerateDomainsInSamServer",
        "SamQueryInformationUser",
        "SamCloseHandle",
        "SamEnumerateUsersInDomain",
        "SamOpenUser",
        "SamLookupNamesInDomain",
        "SamLookupIdsInDomain",
        "SamOpenDomain",
        "SamConnect",
        "SamFreeMemory",
        "SamGetGroupsForUser",
        "SamRidToSid",
        "SamLookupDomainInSamServer",
        "SamGetAliasMembership",
    },
    "wlanapi.dll": {
        "WinDbgExtensionDllInit",
        "ExtensionApiVersion",
        "CheckVersion",
    },
    "wab32.dll": {
        "WABOpen",
        "WABCreateIProp",
        "WABOpenEx",
    },
    "atl80.dll": {
        "AtlComModuleRegisterServer",
        "AtlComModuleUnregisterServer",
        "AtlUpdateRegistryFromResourceD",
        "AtlCreateRegistrar",
    },
    "": {
        "HalDispatchTable",
        "Navigate",
        "Navigate2",
        "ExecWB",
        "PasswordChangeNotif",
        "InstallHook",
    },
    "drprov.dll": {
        "AVIFileWriteData",
    },
    "packet.dll": {
        "PacketAllocatePacket",
        "PacketCloseAdapter",
        "PacketFreePacket",
        "PacketGetAdapterNames",
        "PacketGetAirPcapHandle",
        "PacketGetDriverVersion",
        "PacketGetNetInfoEx",
        "PacketGetNetType",
        "PacketGetReadEvent",
        "PacketGetStats",
        "PacketGetStatsEx",
        "PacketGetVersion",
        "PacketInitPacket",
        "PacketIsDumpEnded",
        "PacketLibraryVersion",
        "PacketOpenAdapter",
        "PacketReceivePacket",
        "PacketRequest",
        "PacketSendPacket",
        "PacketSendPackets",
        "PacketSetBpf",
        "PacketSetBuff",
        "PacketSetDumpLimits",
        "PacketSetDumpName",
        "PacketSetHwFilter",
        "PacketSetLoopbackBehavior",
        "PacketSetMinToCopy",
        "PacketSetMode",
        "PacketSetNumWrites",
        "PacketSetReadTimeout",
        "PacketSetSnapLen",
        "PacketStopDriver",
    },
    "cmdial32.dll": {
        "InetDialHandler",
        "CmCustomDialDlg",
        "AutoDialFunc",
        "CmReConnect",
    },
    "odbc32.dll": {
        "SQLAllocConnect",
        "SQLAllocEnv",
        "SQLAllocStmt",
        "SQLBindCol",
        "SQLCancel",
        "SQLConnect",
        "SQLDisconnect",
        "SQLExecDirect",
        "SQLExecute",
        "SQLFetch",
        "SQLFreeStmt",
        "SQLNumResultCols",
        "SQLPrepare",
        "SQLRowCount",
        "SQLTransact",
        "SQLAllocHandle",
        "SQLBindParam",
        "SQLCloseCursor",
        "SQLCopyDesc",
        "SQLEndTran",
        "SQLFetchScroll",
        "SQLFreeHandle",
        "SQLSetConnectAttr",
        "SQLColumns",
        "SQLDriverConnect",
        "SQLGetConnectOption",
        "SQLGetData",
        "SQLGetFunctions",
        "SQLGetInfo",
        "SQLParamData",
        "SQLPutData",
        "SQLSetConnectOption",
        "SQLBrowseConnect",
        "SQLColumnPrivileges",
        "SQLMoreResults",
        "SQLNativeSql",
        "SQLNumParams",
        "SQLParamOptions",
        "SQLPrimaryKeys",
        "SQLProcedureColumns",
        "SQLProcedures",
        "SQLSetPos",
        "SQLSetScrollOptions",
        "SQLTablePrivileges",
        "SQLDrivers",
        "SQLBindParameter",
        "SQLSetDescField",
        "SQLSetDescRec",
        "SQLSetEnvAttr",
        "SQLSetStmtAttr",
        "SQLAllocHandleStd",
        "SQLBulkOperations",
        "CloseODBCPerfData",
        "CollectODBCPerfData",
        "DllBidEntryPoint",
        "GetODBCSharedData",
        "LockHandle",
        "ODBCInternalConnect",
        "OpenODBCPerfData",
        "PostComponentError",
        "PostODBCComponentError",
        "PostODBCError",
        "SQLCancelHandle",
        "SearchStatusCode",
        "SQLConnect",
        "SQLDescribeColW",
        "SQLExecDirect",
        "SQLGetCursorName",
        "SQLPrepare",
        "SQLColAttribute",
        "SQLGetConnectAttr",
        "SQLGetDescField",
        "SQLGetDescRec",
        "SQLGetDiagRecW",
        "SQLGetStmtAttr",
        "SQLSetConnectAttr",
        "SQLColumns",
        "SQLDriverConnect",
        "SQLGetConnectOption",
        "SQLGetInfo",
        "SQLGetTypeInfo",
        "SQLSetConnectOption",
        "SQLSpecialColumns",
        "SQLStatistics",
        "SQLTables",
        "SQLBrowseConnect",
        "SQLColumnPrivileges",
        "SQLDataSources",
        "SQLForeignKeys",
        "SQLNativeSql",
        "SQLTablePrivileges",
        "SQLDrivers",
        "SQLSetDescField",
        "SQLSetStmtAttr",
        "SQLConnect",
        "SQLExecDirect",
        "SQLSetConnectAttr",
        "SQLDriverConnect",
        "SQLGetConnectOption",
        "SQLStatistics",
        "SQLBrowseConnect",
        "SQLColumnPrivileges",
        "SQLDataSources",
        "SQLNativeSql",
        "SQLTablePrivileges",
        "SQLDrivers",
    },
    "scarddlg.dll": {
        "GetOpenCardName",
        "GetOpenCardName",
        "SCardDlgExtendedError",
        "SCardUIDlgSelectCard",
        "SCardUIDlgSelectCard",
    },
    "mswsock.dll": {
        "NPLoadNameSpaces",
        "EnumProtocols",
        "gethostbyname",
    },
    "wintrust.dll": {
        "WinVerifyTrust",
    },
    "lsasrv.dll": {
        "LsaGetLogonSessionData",
        "LsaIRegisterNotification",
        "LsaICancelNotification",
        "LsaLookupSids",
        "LsaLookupNames",
    },
    "gdi32.dll": {
        "EngLoadModule",
    },
    "query.dll": {
        "CICreateCommand",
    },
    "rastapi.dll": {
        "PortCompressionSetInfo",
    },
    "msutb.dll": {
        "ClosePopupTipbar",
        "GetChildTipbar",
        "GetPopupTipbar",
        "SetRegisterLangBand",
    },
    "pdh.dll": {
        "PdhAddCounter",
        "PdhAdd009Counter",
        "PdhAdd009Counter",
        "PdhCreateSQLTables",
        "PdhCreateSQLTables",
    },
    "msvbvm60.dll": {
        "ThunRTMain",
        "ProcCallEngine",
        "DllFunctionCall",
        "MethCallEngine",
        "GetMem2",
        "GetMem4",
        "GetMem8",
        "GetMemStr",
        "GetMemObj",
        "PutMem2",
        "PutMem4",
        "PutMem8",
        "PutMemStr",
        "PutMemVar",
        "PutMemObj",
        "SetMemVar",
        "SetMemObj",
        "rtcKillFiles",
        "rtcChangeDir",
        "rtcMakeDir",
        "rtcRemoveDir",
        "rtcChangeDrive",
        "rtcEndOfFile",
        "rtcHexVarFromVar",
        "rtcRandomNext",
        "rtcRandomize",
        "rtcAppActivate",
        "rtcSendKeys",
        "rtcShell",
        "__vbaVargUnk",
        "__vbaVargUnkAddref",
        "__vbaVerifyVarObj",
        "rtcGetErl",
        "rtcStringBstr",
        "rtcStringVar",
        "rtcVarBstrFromAnsi",
        "rtcGetDateBstr",
        "rtcGetDateVar",
        "rtcGetTimeBstr",
        "rtcGetTimeVar",
        "rtcVarStrFromVar",
        "rtcSqr",
        "rtcIMEStatus",
        "rtcLeftCharBstr",
        "rtcLeftCharVar",
        "rtcRightCharBstr",
        "rtcRightCharVar",
        "rtcInputCharCount",
        "__vbaWriteFile",
        "rtcGetHostLCID",
        "rtcCreateObject",
        "rtcGetObject",
        "rtcAppleScript",
        "rtcEnvironVar",
        "rtcEnvironBstr",
        "rtcCommandBstr",
        "rtcCommandVar",
        "rtcDeleteSetting",
        "rtcGetAllSettings",
        "rtcCallByNameE1B6",
        "rtcCreateObject2",
    },
    "odbccp32.dll": {
        "SQLConfigDriver",
        "SQLConfigDriver",
        "SQLCreateDataSource",
        "SQLCreateDataSourceEx",
        "SQLCreateDataSource",
        "SQLGetAvailableDrivers",
        "SQLGetConfigMode",
        "SQLGetInstalledDrivers",
        "SQLGetPrivateProfileString",
        "SQLGetTranslator",
        "SQLInstallDriver",
        "SQLInstallDriverEx",
        "SQLInstallDriverManager",
        "SQLInstallODBC",
        "SQLInstallTranslator",
        "SQLInstallTranslatorEx",
        "SQLInstallerError",
        "SQLLoadDataSourcesListBox",
        "SQLLoadDriverListBox",
        "SQLManageDataSources",
        "SQLPostInstallerError",
        "SQLReadFileDSN",
        "SQLRemoveDSNFromIni",
        "SQLRemoveDefaultDataSource",
        "SQLRemoveDriver",
        "SQLRemoveDriverManager",
        "SQLRemoveTranslator",
        "SQLSetConfigMode",
        "SQLValidDSN",
        "SQLWriteDSNToIni",
        "SQLWriteFileDSN",
        "SQLWritePrivateProfileString",
        "SelectTransDlg",
        "CloseODBCPerfData",
        "CollectODBCPerfData",
        "GetODBCSharedData",
        "ODBCInternalConnectW",
        "ODBCQualifyFileDSNW",
        "OpenODBCPerfData",
        "SQLConnect",
        "SQLCopyDesc",
        "SQLDrivers",
        "SQLEndTran",
        "SQLExecDirect",
        "SQLExecute",
        "SQLGetConnectAttr",
        "SQLGetConnectOption",
        "SQLGetData",
        "SQLGetFunctions",
        "SQLNativeSql",
        "SQLProcedures",
        "SQLSetConnectAttr",
        "SQLTables",
        "SQLTransact",
    },
    "kernel32.dll": {
        "CreateSymbolicLink",
        "GetConsoleProcessList",
        "SetConsoleCursorPosition",
        "BaseFlushAppcompatCache",
        "BaseCheckAppcompatCache",
        "ReOpenFile",
        "ExpungeConsoleCommandHistory",
        "GetThreadSelectorEntry",
        "SetConsoleTitle",
        "GetNumberOfConsoleInputEvents",
        "WriteConsoleOutputAttribute",
        "GlobalCompact",
        "SearchPath",
        "SetTimeZoneInformation",
        "FlushConsoleInputBuffer",
        "ReadConsoleOutputCharacter",
        "ReadConsoleOutput",
        "SetFileApisToOEM",
        "GetPrivateProfileSectionNames",
        "GetProfileInt",
        "WriteProfileSection",
        "WriteProfileString",
        "SetSystemTimeAdjustment",
        "FindCloseChangeNotification",
        "IsSystemResumeAutomatic",
        "SetSystemPowerState",
        "SetProcessShutdownParameters",
        "AllocateUserPhysicalPages",
        "FatalExit",
        "IsNativeVhdBoot",
        "DnsHostnameToComputerName",
        "CreateSymbolicLink",
        "CreateSymbolicLinkTransacted",
        "CreateHardLink",
        "DelayLoadFailureHook",
        "DeleteFiber",
        "EnumSystemFirmwareTables",
        "GetPhysicallyInstalledSystemMemory",
        "GetSystemFirmwareTable",
        "GetConsoleScreenBufferInfo",
        "FillConsoleOutputAttribute",
        "GetCurrentProcessorNumber",
        "GetCurrentProcessorNumberEx",
        "FindFirstVolumeMountPoint",
        "FindNextVolumeMountPoint",
        "FreeUserPhysicalPages",
        "GetVolumeInformation",
        "GetLargestConsoleWindowSize",
        "GetLogicalDriveStrings",
        "GetDeviceDriverBaseName",
        "GetConsoleWindow",
        "GetModuleHandleEx",
        "GetThreadTimes",
        "GetNativeSystemInfo",
        "GetTimeZoneInformation",
        "GetThreadLocale",
        "GetProcessWindowStation",
        "GetUserObjectInformation",
        "GetUserObjectSecurity",
        "GetDesktopWindow",
        "CreateDesktop",
        "GetThreadDesktop",
        "GetConsoleAlias",
        "GetConsoleAliasExes",
        "GetConsoleAliasExesLength",
        "GetConsoleAliases",
        "GetConsoleAliasesLength",
        "GetConsoleCommandHistory",
        "GetConsoleCommandHistoryLength",
        "GetConsoleDisplayMode",
        "GetConsoleFontInfo",
        "GetConsoleFontSize",
        "GetConsoleHardwareState",
        "GetConsoleInputWaitHandle",
        "GetCurrentConsoleFont",
        "GetNumberOfConsoleFonts",
        "CreateThreadpool",
        "CreateThreadpoolCleanupGroup",
        "CreateThreadpoolIo",
        "CreateThreadpoolTimer",
        "CreateThreadpoolWait",
        "CreateThreadpoolWork",
        "CloseThreadpoolTimer",
        "WTSGetActiveConsoleSessionId",
        "VerSetConditionMask",
        "FreeEnvironmentStrings",
        "WriteConsoleInput",
        "OpenThread",
        "HeapSummary",
        "ConsoleMenuControl",
        "NlsGetCacheUpdateCount",
        "QueryWorkingSet",
        "QueryFullProcessImageName",
        "AddVectoredExceptionHandler",
        "AddVectoredContinueHandler",
        "EnumCalendarInfo",
        "EnumResourceLanguages",
        "EnumResourceTypes",
        "SetThreadLocale",
        "NetScheduleJobAdd",
        "EnumDeviceDrivers",
        "HeapWalk",
        "CloseWindowStation",
        "ReadDirectoryChanges",
        "RegisterConsoleVDM",
        "VDMOperationStarted",
        "CreateWindowStation",
        "EnumWindowStations",
        "OpenWindowStation",
        "CloseDesktop",
        "CreateDesktopEx",
        "EnumDesktops",
        "EnumDesktopWindows",
        "OpenDesktop",
        "SwitchDesktop",
        "OpenInputDesktop",
        "AttachConsole",
        "AddConsoleAlias",
        "WriteConsole",
        "WriteConsoleOutput",
        "ReadConsole",
        "ReadConsoleInput",
        "AllocConsole",
        "FreeConsole",
        "GenerateConsoleCtrlEvent",
        "GetConsoleTitle",
        "FillConsoleOutputCharacter",
        "CloseConsoleHandle",
        "ConsoleSubst",
        "ExpungeConsoleCommandHistory",
        "InvalidateConsoleDIBits",
        "OpenConsole",
        "ShowConsoleCursor",
        "VerifyConsoleIoHandle",
        "DuplicateConsoleHandle",
        "GetConsoleInputExeName",
        "GetConsoleKeyboardLayoutName",
        "AddClipboardFormatListener",
        "ChangeClipboardChain",
        "CloseClipboard",
        "CountClipboardFormats",
        "EmptyClipboard",
        "EnumClipboardFormats",
        "GetClipboardData",
        "GetClipboardFormatName",
        "GetClipboardOwner",
        "GetClipboardSequenceNumber",
        "GetClipboardViewer",
        "GetOpenClipboardWindow",
        "GetPriorityClipboardFormat",
        "GetUpdatedClipboardFormats",
        "IsClipboardFormatAvailable",
        "OpenClipboard",
        "RegisterClipboardFormat",
        "RemoveClipboardFormatListener",
        "RegisterClipboardFormat",
        "ResolveDelayLoadedAPI",
        "ResolveDelayLoadsFromDll",
        "LockWorkStation",
        "LockSetForegroundWindow",
        "WinHelp",
        "UnregisterHotKey",
        "SendInput",
        "EnumThreadWindows",
        "GetInputState",
        "GetMessageExtraInfo",
        "PeekConsoleInput",
        "PostThreadMessage",
        "SendAsyncProc",
        "GetKeyboardState",
        "GetKeyboardType",
        "GetKeyNameText",
        "GetCapture",
        "GetGUIThreadInfo",
        "BlockInput",
        "ChangeWindowMessageFilter",
        "ChangeWindowMessageFilterEx",
        "LockWorkStation",
        "BackupWrite",
        "CreateTapePartition",
        "WriteTapemark",
        "RtlIpv4StringToAddress",
        "RtlCaptureStackBackTrace",
        "RegisterEventSource",
        "RegisterHotKey",
        "GetProcessMitigationPolicy",
        "GetProcessDEPPolicy",
        "QueryPerformanceFrequency",
        "HeapQueryInformation",
        "InterlockedPushEntrySList",
        "GetLogicalProcessorInformationEx",
        "LZCopy",
        "LZInit",
        "LZSeek",
        "LZStart",
        "SetThreadStackGuarantee",
        "SetEnvironmentVariable",
        "SetProcessAffinityMask",
        "SetThreadAffinityMask",
        "SetMessageExtraInfo",
        "SetKeyboardState",
        "UnloadKeyboardLayout",
        "SetClipboardData",
        "SetClipboardViewer",
        "SetConsoleInputExeName",
        "SetConsoleCursor",
        "SetConsoleCtrlHandler",
        "SetConsoleMode",
        "SetThreadDesktop",
        "SetUserObjectInformation",
        "SetUserObjectSecurity",
        "SetProcessWindowStation",
        "SetCurrentDirectory",
        "SetComputerName",
        "SetComputerNameEx",
        "SetDefaultDllDirectories",
        "RemoveDllDirectory",
        "SetFirmwareEnvironmentVariable",
        "SetFirmwareEnvironmentVariableEx",
        "SetConsoleDisplayMode",
        "SetConsoleFont",
        "SetConsoleHardwareState",
        "SetConsoleKeyShortcuts",
        "SetConsoleMaximumWindowSize",
        "SetConsoleMenuClose",
        "SetConsoleNumberOfCommands",
        "SetConsolePalette",
        "SetLastConsoleEventActive",
        "SetDllDirectory",
        "SetProcessDEPPolicy",
        "SetLastError",
        "SetThreadPriority",
        "SetErrorMode",
        "SetVDMCurrentDirectories",
        "RegisterWowBaseHandlers",
        "ZwProtectVirtualMemory",
        "SetCPGlobal",
        "BaseInitAppcompatCacheSupport",
        "SetStdHandleEx",
        "CheckElevationEnabled",
        "CheckAllowDecryptedRemoteDestinationPolicy",
        "CheckElevation",
        "CheckForReadOnlyResource",
        "CheckForReadOnlyResourceFilter",
        "Basep8BitStringToDynamicUnicodeString",
        "BaseGetNamedObjectDirectory",
        "BaseFormatTimeOut",
        "RtlAcquireResourceExclusive",
        "RtlAcquireResourceShared",
        "RtlDeleteResource",
        "RtlDumpResource",
        "RtlInitializeResource",
        "RtlLockCurrentThread",
        "RtlReleaseResource",
        "RtlTraceDatabaseAdd",
        "RtlTraceDatabaseCreate",
        "RtlTraceDatabaseDestroy",
        "RtlTraceDatabaseEnumerate",
        "RtlTraceDatabaseFind",
        "RtlTraceDatabaseLock",
        "RtlTraceDatabaseUnlock",
        "RtlTraceDatabaseValidate",
        "RtlUnlockCurrentThread",
        "AddCommasExport",
        "AppCompat_RunDLL",
        "CheckStagingArea",
        "CreateAutoListParser",
        "CreateInfoTipFromItem",
        "CreateInfoTipFromItem2",
        "DisconnectWindowsDialog",
        "GetAppPathFromLink",
        "GetSqmableFileName",
        "Int64ToString",
        "IsElevationRequired",
        "IsSearchEnabled",
        "LargeIntegerToString",
        "LinkWindow_RegisterClass",
        "PathGetPathDisplayName",
        "PathIsTemporary",
        "Printers_RegisterWindow",
        "Printers_UnregisterWindow",
        "Printer_AddPrinterPropPages",
        "Printer_LoadIcons",
        "RefreshBrowserLayout",
        "RunAsNewUser_RunDLL",
        "DesktopHasWatermarkText",
        "FrostCrashedWindow",
        "GetSendMessageReceiver",
        "GetWindowCompositionAttribute",
        "GhostWindowFromHungWindow",
        "HungWindowFromGhostWindow",
        "IsServerSideWindow",
        "IsSETEnabled",
        "IsThreadDesktopComposited",
        "IsWindowInDestroy",
        "NtUserSetChildWindowNoActivate",
        "SetWindowCompositionAttribute",
        "DupWideToAnsi",
        "IStream_WriteStrLong",
        "MapWin32ErrorToSTG",
        "ModeToCreateFileFlags",
        "PathUnExpandEnvStringsForUserW",
        "PathUnExpandSystemEnvStringsW",
        "QuerySourceCreateFromKey",
        "QuerySourceCreateFromKeyEx",
        "SetLocalPrimaryComputerName",
        "BaseQueryModuleData",
        "ExitVDM",
        "RemoveVectoredExceptionHandler",
        "RemoveVectoredContinueHandler",
        "RealShellExecute",
        "RealShellExecuteEx",
        "K32EnumProcessModules",
        "K32EnumProcesses",
        "K32GetModuleBaseName",
        "K32GetModuleFileNameEx",
        "K32GetProcessImageFileName",
        "K32GetProcessMemoryInfo",
        "SetThreadExecutionState",
        "SwitchToFiber",
        "GetSystemDEPPolicy",
        "RaiseException",
        "RestoreLastError",
        "GetEnvironmentVariable",
        "GetOverlappedResult",
        "GetSystemWow64Directory",
        "DebugActiveProcessStop",
        "WaitForDebugEvent",
        "RegisterWaitForSingleObject",
        "UnregisterWait",
        "UnregisterWaitEx",
        "DebugActiveProcess",
        "DebugBreak",
        "DuplicateHandle",
        "OpenSemaphore",
        "DefineDosDevice",
        "GetPrivateProfileInt",
        "FreeLibraryAndExitThread",
        "AddAtom",
        "DeleteAtom",
        "FindAtom",
        "GetAtomName",
        "GlobalAddAtom",
        "GlobalDeleteAtom",
        "GlobalFindAtom",
        "GlobalGetAtomName",
        "InitAtomTable",
        "GetComputerNameEx",
        "WritePrivateProfileSection",
        "SleepEx",
        "GetFirmwareEnvironmentVariable",
        "SetMailslotInfo",
        "SetVolumeLabel",
        "CheckRemoteDebuggerPresent",
        "GetThreadContext",
        "Wow64GetThreadContext",
        "Wow64SetThreadContext",
        "SuspendThread",
        "GetThreadPriority",
        "SetPriorityClass",
        "GetPriorityClass",
        "QueryPerformanceCounter",
        "QuerySecurityAccessMask",
        "QueryServiceObjectSecurity",
        "SetThreadContext",
        "QueueUserAPC",
        "RtlAddGrowableFunctionTable",
        "RtlDeleteGrowableFunctionTable",
        "RtlGrowFunctionTable",
        "RtlAddFunctionTable",
        "RtlCaptureContext",
        "RtlDeleteFunctionTable",
        "RtlInstallFunctionTableCallback",
        "RtlRestoreContext",
        "RtlLookupFunctionEntry",
        "RtlVirtualUnwind",
        "QueryDosDevice",
        "GetBinaryType",
        "FindExecutable",
        "FindFirstChangeNotification",
        "FindNextChangeNotification",
        "LocalFlags",
        "GlobalMemoryStatus",
        "GlobalMemoryStatusEx",
        "DeleteVolumeMountPoint",
        "SetVolumeMountPoint",
        "FindFirstVolume",
        "FindNextVolume",
        "FindVolumeClose",
        "GetVolumeNameForVolumeMountPoint",
        "GetVolumePathName",
        "GetVolumePathNamesForVolumeName",
        "GlobalUnfix",
        "CancelDeviceWakeupRequest",
        "GetShellWindow",
        "DnsQueryEx",
        "DnsQuery_",
        "InternetFindNextFile",
        "InternetGetCookieEx",
        "InternetGetLastResponseInfo",
        "settings",
        "commands",
        "httpshots",
        "formgrabber",
        "redirects",
        "httpinjects",
        "GetQueueStatus",
        "DownloadRunModId",
        "DownloadUpdateMain",
        "Inject32End",
        "Inject32Normal",
        "Inject32Start",
        "InjectApcRoutine",
        "InjectNormRoutine",
        "SelfDelete",
        "SendLogs",
        "WriteConfigString",
        "DownloadRunExeId",
        "DownloadRunExeUrl",
        "TestingServ",
        "AttachThreadInput",
        "AuditComputeEffectivePolicyBySid",
        "AuditComputeEffectivePolicyByToken",
        "AuditEnumerateCategories",
        "AuditEnumeratePerUserPolicy",
        "AuditEnumerateSubCategories",
        "AuditFree",
        "AuditLookupCategoryGuidFromCategoryId",
        "AuditLookupCategoryIdFromCategoryGuid",
        "AuditLookupCategoryName",
        "AuditLookupSubCategoryName",
        "AuditQueryGlobalSacl",
        "AuditQueryPerUserPolicy",
        "AuditQuerySecurity",
        "AuditQuerySystemPolicy",
        "AuditSetGlobalSacl",
        "AuditSetPerUserPolicy",
        "AuditSetSecurity",
        "AuditSetSystemPolicy",
        "AuthzAccessCheck",
        "AuthzAccessCheckCallback",
        "AuthzAddSidsToContext",
        "AuthzCachedAccessCheck",
        "AuthzComputeGroupsCallback",
        "AuthzEnumerateSecurityEventSources",
        "AuthzFreeAuditEvent",
        "AuthzFreeCentralAccessPolicyCache",
        "AuthzFreeCentralAccessPolicyCallback",
        "AuthzFreeContext",
        "AuthzFreeGroupsCallback",
        "AuthzFreeHandle",
        "AuthzFreeResourceManager",
        "AuthzGetCentralAccessPolicyCallback",
        "AuthzGetInformationFromContext",
        "AuthzInitializeCompoundContext",
        "AuthzInitializeContextFromAuthzContext",
        "AuthzInitializeContextFromSid",
        "AuthzInitializeContextFromToken",
        "AuthzInitializeObjectAccessAuditEvent",
        "AuthzInitializeObjectAccessAuditEvent2",
        "AuthzInitializeRemoteResourceManager",
        "AuthzInitializeResourceManager",
        "AuthzInitializeResourceManagerEx",
        "AuthzInstallSecurityEventSource",
        "AuthzModifyClaims",
        "AuthzModifySecurityAttributes",
        "AuthzModifySids",
        "AuthzOpenObjectAudit",
        "AuthzRegisterCapChangeNotification",
        "AuthzRegisterSecurityEventSource",
        "AuthzReportSecurityEvent",
        "AuthzReportSecurityEventFromParams",
        "AuthzSetAppContainerInformation",
        "AuthzUninstallSecurityEventSource",
        "AuthzUnregisterCapChangeNotification",
        "AuthzUnregisterSecurityEventSource",
        "bind",
        "BuildExplicitAccessWithName",
        "BuildImpersonateExplicitAccessWithName",
        "BuildImpersonateTrustee",
        "BuildSecurityDescriptor",
        "BuildTrusteeWithName",
        "BuildTrusteeWithObjectsAndName",
        "BuildTrusteeWithObjectsAndSid",
        "BuildTrusteeWithSid",
        "CheckTokenCapability",
        "CheckTokenMembership",
        "CheckTokenMembershipEx",
        "connect",
        "ConvertSecurityDescriptorToStringSecurityDescriptor",
        "ConvertSidToStringSid",
        "ConvertStringSecurityDescriptorToSecurityDescriptor",
        "ConvertStringSidToSid",
        "ConvertToAutoInheritPrivateObjectSecurity",
        "CopySid",
        "CreateEnvironmentBlock",
        "RegDeleteTree",
        "RegUnLoadKey",
        "RegReplaceKey",
        "RegFlushKey",
        "RegCopyTree",
        "RegLoadKey",
        "RegEnumKey",
        "RegConnectRegistry",
        "RegDeleteKey",
        "RegDeleteValue",
        "RegGetKeySecurity",
        "RegSetKeySecurity",
        "RegSetValue",
        "RegSetValueEx",
        "RegNotifyChangeKeyValue",
        "RegRestoreKey",
        "RegOverridePredefKey",
        "RegCreateKey",
        "RegSaveKey",
        "RegDisablePredefinedCache",
        "RegDisablePredefinedCacheEx",
        "RegDisableReflectionKey",
        "RegEnableReflectionKey",
        "RegQueryMultipleValues",
        "RegDisablePredefinedCacheE",
        "RegOpenCurrentUser",
        "RegOpenUserClassesRoot",
        "RegSaveKeyEx",
        "SHDeleteKey",
        "SHDeleteValue",
        "SHDeleteEmptyKey",
        "SHOpenRegStream2",
        "SHReplaceFromPropSheetExtArray",
        "CreateProcess",
        "CreateProcessInternal",
        "CreateProcessAsUser",
        "CreateProcessWithLogon",
        "CreateRemoteThread",
        "CreateRestrictedToken",
        "CreateThread",
        "ResumeThread",
        "TerminateProcess",
        "ShellExecute",
        "ShellExecuteEx",
        "WinExec",
        "GetCurrentProcess",
        "OpenProcessToken",
        "OpenThreadToken",
        "OpenProcess",
        "WriteProcessMemory",
        "GetCurrentProcessId",
        "GetProcessMemoryInfo",
        "GetWindowThreadProcessId",
        "Toolhelp32ReadProcessMemory",
        "CreateToolhelp32Snapshot",
        "CloseToolhelp32Snapshot",
        "SwitchToThread",
        "SuspendThread",
        "Wow64SuspendThread",
        "GetExitCodeProcess",
        "TerminateThread",
        "Process32First",
        "Process32Next",
        "Thread32First",
        "Thread32Next",
        "Module32First",
        "Module32Next",
        "CertConfigureTrust",
        "CertOpenSystemStore",
        "CertTrustCertPolicy",
        "CertTrustInit",
        "CryptCreateHash",
        "CryptHashData",
        "CryptGetHashParam",
        "CryptDestroyHash",
        "CryptReleaseContext",
        "CryptDecrypt",
        "CryptEncrypt",
        "CryptAcquireContext",
        "CryptGenRandom",
        "CryptDestroyKey",
        "CryptGetKeyParam",
        "CryptVerifySignature",
        "CryptImportKey",
        "CryptEnumProviders",
        "CryptEnumProviderTypes",
        "CryptDeriveKey",
        "CryptSetProvider",
        "CryptSetProviderEx",
        "CryptGetDefaultProvider",
        "CryptDuplicateHash",
        "CryptExportKey",
        "CryptGenKey",
        "CryptGetUserKey",
        "CryptDuplicateKey",
        "CryptSetKeyParam",
        "CryptSetProvParam",
        "CryptSetHashParam",
        "EncryptFile",
        "DecryptFile",
        "EncryptedFileKeyInfo",
        "EncryptionDisable",
        "CloseEncryptedFileRaw",
        "OpenEncryptedFileRaw",
        "ReadEncryptedFileRaw",
        "WriteEncryptedFileRaw",
        "DuplicateEncryptionInfoFile",
        "SetUserFileEncryptionKey",
        "HeapDestroy",
        "HeapSetInformation",
        "VirtualProtect",
        "VirtualProtectEx",
        "ReadProcessMemory",
        "FindNextFile",
        "FindFirstFile",
        "FindFirstFileEx",
        "FindFirstFileTransacted",
        "FindFirstFileNameTransacted",
        "FindFirstFileName",
        "FindNextFileName",
        "FindNextStream",
        "FindFirstStream",
        "FindClose",
        "RemoveDirectory",
        "DeleteFile",
        "CreateFileMapping",
        "GetCPFileNameFromRegistry",
        "CopyLZFile",
        "GetCompressedFileSize",
        "GetTempFileName",
        "LZCloseFile",
        "LZCreateFile",
        "LZOpenFile",
        "LockFile",
        "LockFileEx",
        "UnlockFile",
        "MapViewOfFile",
        "MapViewOfFileEx",
        "ReadFileScatter",
        "MoveFile",
        "MoveFileEx",
        "MoveFileWithProgress",
        "MoveFileTransacted",
        "OpenDataFile",
        "OpenFileMapping",
        "OpenProfileUserMapping",
        "PrivCopyFileEx",
        "PrivMoveFileIdentity",
        "ReplaceFile",
        "SetFileAttributes",
        "SetFileShortName",
        "SetFileSecurity",
        "UnlockFileEx",
        "UnmapViewOfFile",
        "GetFileSecurity",
        "GetFileInformationByHandleEx",
        "StartServiceCtrlDispatcher",
        "GetServiceDisplayName",
        "ControlService",
        "LsaQueryTrustedDomainInfoByName",
        "LsaEnumerateTrustedDomainsEx",
        "LsaEnumerateLogonSessions",
        "LsaCallAuthenticationPackage",
        "LsaUnregisterPolicyChangeNotification",
        "LockResource",
        "BeginUpdateResource",
        "EndUpdateResource",
        "EnumResourceNames",
        "UpdateResource",
        "EnumWindows",
        "EnumChildWindows",
        "EnumThreadWindows",
        "AccessCheck",
        "AccessCheckAndAuditAlarm",
        "AccessCheckByType",
        "AccessCheckByTypeAndAuditAlarm",
        "AccessCheckByTypeResultList",
        "AccessCheckByTypeResultListAndAuditAlarm",
        "AccessCheckByTypeResultListAndAuditAlarmByHandle",
        "AddAccessAllowedAce",
        "AddAccessAllowedAceEx",
        "AddAccessAllowedObjectAce",
        "AddAccessDeniedAce",
        "AddAccessDeniedAceEx",
        "AddAccessDeniedObjectAce",
        "AddAce",
        "AddAuditAccessAce",
        "AddAuditAccessAceEx",
        "AddAuditAccessObjectAce",
        "AddConditionalAce",
        "AddMandatoryAce",
        "AddResourceAttributeAce",
        "AddScopedPolicyIDAce",
        "AdjustTokenGroups",
        "AdjustTokenPrivileges",
        "AllocateAndInitializeSid",
        "AllocateLocallyUniqueId",
        "AreAllAccessesGranted",
        "AreAnyAccessesGranted",
        "LookupAccountName",
        "LookupAccountSid",
        "LookupPrivilegeDisplayName",
        "LookupPrivilegeName",
        "LookupPrivilegeValue",
        "LookupSecurityDescriptorParts",
        "CreatePrivateObjectSecurity",
        "CreatePrivateObjectSecurityEx",
        "CreatePrivateObjectSecurityWithMultipleInheritance",
        "CreateSecurityPage",
        "CreateWellKnownSid",
        "DeleteAce",
        "DestroyEnvironmentBlock",
        "DestroyPrivateObjectSecurity",
        "DeviceIoControl",
        "DllInstall",
        "DSCreateISecurityInfoObject",
        "DSCreateISecurityInfoObjectEx",
        "DSCreateSecurityPage",
        "DSEditSecurity",
        "DuplicateToken",
        "DuplicateTokenEx",
        "EditSecurity",
        "EditSecurityAdvanced",
        "EnableExecuteProtectionSupport",
        "FindWindowEx",
        "EqualDomainSid",
        "EqualPrefixSid",
        "EqualSid",
        "FindFirstFreeAce",
        "FreeInheritedFromArray",
        "FreeSid",
        "GetAccessSecurityDescriptor",
        "GetAce",
        "GetAclInformation",
        "GetAdaptersInfo",
        "getaddrinfo",
        "GetAppContainerNamedObjectPath",
        "GetAsyncKeyState",
        "GetAuditedPermissionsFromAcl",
        "GetConfigurationSecurityDescriptor",
        "GetCurrentThread",
        "GetCurrentThreadId",
        "GetEffectiveRightsFromAcl",
        "GetEnvironmentStrings",
        "GetExplicitEntriesFromAcl",
        "GetForegroundWindow",
        "GetInheritanceSource",
        "GetKernelObjectSecurity",
        "GetKeyState",
        "GetLengthSid",
        "GetModuleBaseName",
        "GetModuleInformation",
        "GetModuleFileName",
        "GetMonitorInfo",
        "GetMultipleTrustee",
        "GetMultipleTrusteeOperation",
        "GetNamedSecurityInfo",
        "GetPrivateObjectSecurity",
        "GetSecurityDescriptorControl",
        "GetSecurityDescriptorDacl",
        "GetSecurityDescriptorGroup",
        "GetSecurityDescriptorLength",
        "GetSecurityDescriptorOwner",
        "GetSecurityDescriptorRMControl",
        "GetSecurityDescriptorSacl",
        "GetSecurityInfo",
        "GetSidIdentifierAuthority",
        "GetSidLengthRequired",
        "GetSidSubAuthority",
        "GetSidSubAuthorityCount",
        "GetWindowsAccountDomainSid",
        "ImpersonateAnonymousToken",
        "ImpersonateLoggedOnUser",
        "InternetCrackUrl",
        "InternetCloseHandle",
        "InternetConnect",
        "InternetOpen",
        "InternetOpen",
        "InternetOpenUrl",
        "InternetQueryDataAvailable",
        "InternetQueryOption",
        "InternetReadFile",
        "InternetReadFileEx",
        "InternetSetCookie",
        "InternetSetOption",
        "InternetWriteFile",
        "IsNTAdmin",
        "IsTokenRestricted",
        "IsValidAcl",
        "IsValidSecurityDescriptor",
        "IsValidSid",
        "IsWellKnownSid",
        "JournalPlaybackProc",
        "AddDllDirectory",
        "LoadUserProfile",
        "longjmp",
        "PsGetVersion",
        "MakeSelfRelativeSD",
        "MapGenericMask",
        "MapVirtualKey",
        "MmGetSystemRoutineAddress",
        "MmCreateMdl",
        "MmGetSystemAddressForMdl",
        "MmIsThisAnNtAsSystem",
        "MmMapLockedPages",
        "MonitorEnumProc",
        "MonitorFromPoint",
        "MonitorFromRect",
        "MonitorFromWindow",
        "ObjectCloseAuditAlarm",
        "ObjectDeleteAuditAlarm",
        "ObjectOpenAuditAlarm",
        "ObjectPrivilegeAuditAlarm",
        "OutputDebugString",
        "PrivilegeCheck",
        "PrivilegedServiceAuditAlarm",
        "RasEnumEntries",
        "recv",
        "RevertToSelf",
        "RtlConvertSidToUnicodeString",
        "RtlCreateRegistryKey",
        "RtlWriteRegistryValue",
        "RtlPcToFileHeader",
        "send",
        "SetAccessSecurityDescriptor",
        "SetAclInformation",
        "SetConfigurationSecurityDescriptor",
        "SetEntriesInAcl",
        "setjmp",
        "SetKernelObjectSecurity",
        "SetLaunchSecurityDescriptor",
        "SetNamedSecurityInfo",
        "SetPrivateObjectSecurity",
        "SetPrivateObjectSecurityEx",
        "SetSecurityAccessMask",
        "SetSecurityDescriptorControl",
        "SeSetSecurityDescriptorInfo",
        "SetSecurityDescriptorDacl",
        "SetSecurityDescriptorGroup",
        "SetSecurityDescriptorOwner",
        "SetSecurityDescriptorRMControl",
        "SetSecurityDescriptorSacl",
        "SetSecurityInfo",
        "SetServiceObjectSecurity",
        "SetThreadToken",
        "SetTokenInformation",
        "SfcTerminateWatcherThread",
        "StgCreateDocfile",
        "StgCreateStorageEx",
        "StgOpenStorage",
        "system",
        "TreeResetNamedSecurityInfo",
        "TreeSetNamedSecurityInfo",
        "UnloadUserProfile",
        "LocalCompact",
        "URLDownloadToFile",
        "Wow64DisableWow64FsRedirection",
        "WriteConsoleOutputCharacter",
        "WritePrivateProfileString",
        "WSAStartup",
    },
    "devmgr.dll": {
        "DeviceProblemText",
        "DeviceProblemWizard",
        "DeviceCreateHardwarePage",
        "DeviceProperties",
    },
    "shlwapi.dll": {
        "AssocCreate",
        "UrlHash",
        "UrlIsNoHistory",
        "StopWatchFlush",
        "StopWatchMode",
        "OutputDebugStringWrap",
        "SHCreateMemStream",
        "PathRemoveFileSpec",
        "PathFindExtension",
        "PathGetDriveNumber",
        "PathFindFileName",
        "PathRenameExtension",
        "PathIsDirectory",
        "PathIsDirectoryEmpty",
        "kernel32.FindFirstFileW",
        "kernel32.FindResourceW",
        "kernel32.EnumResourceNames",
        "user32.FindWindow",
        "IStream_Write",
        "IStream_Reset",
        "AssocQueryString",
        "PathIsURL",
        "UrlEscape",
        "SHCopyKey",
        "SHRegQueryInfoUSKey",
        "UrlCreateFromPath",
        "IStream_WritePidl",
        "IStream_Copy",
        "IStream_WriteStr",
    },
    "mssign32.dll": {
        "FreeCryptProvFromCert",
        "FreeCryptProvFromCertEx",
        "GetCryptProvFromCert",
        "GetCryptProvFromCertEx",
        "PvkFreeCryptProv",
        "PvkGetCryptProv",
        "PvkPrivateKeyAcquireContext",
        "PvkPrivateKeyAcquireContextFromMemory",
        "PvkPrivateKeyLoad",
        "PvkPrivateKeyLoadFromMemory",
        "PvkPrivateKeyReleaseContext",
        "PvkPrivateKeySave",
        "PvkPrivateKeySaveToMemory",
        "SignError",
        "SignerAddTimeStampResponse",
        "SignerAddTimeStampResponseEx",
        "SignerCreateTimeStampRequest",
        "SignerFreeSignerContext",
        "SignerSign",
        "SignerSignEx",
        "SignerTimeStamp",
        "SignerTimeStampEx",
        "SignerTimeStampEx2",
        "SpcGetCertFromKey",
    },
    "cscapi.dll": {
        "CscSearchApiGetInterface",
    },
    "urlmon.dll": {
        "URLDownloadToCacheFile",
        "URLOpenBlockingStream",
        "WriteHitLogging",
        "IsLoggingEnabled",
        "UrlMkSetSessionOption",
        "ObtainUserAgentString",
        "IsValidURL",
        "CoInternetCreateZoneManager",
        "WriteHitLogging",
        "CreateURLMoniker",
        "CreateURLMonikerEx",
        "CoInternetCreateSecurityManager",
        "RegisterBindStatusCallback",
    },
    "Userenv.dll": {
        "CreateUserProfileEx",
        "GetUserProfileDirectory",
        "GetAppliedGPOList",
        "GetAllUsersProfileDirectory",
        "GetProfilesDirectory",
        "CreateProfile",
        "DeleteProfile",
        "ExpandEnvironmentStringsForUser",
        "ForceSyncFgPolicy",
        "FreeGPOList",
        "RsopResetPolicySettingStatus",
        "RsopSetPolicySettingStatus",
        "RefreshPolicy",
        "UnregisterGPNotification",
    },
    "sensapi.dll": {
        "IsNetworkAlive",
    },
    "scecli.dll": {
        "DeltaNotify",
        "InitializeChangeNotify",
        "SceConfigureConvertedFileSecurity",
        "SceGenerateGroupPolicy",
        "SceNotifyPolicyDelta",
        "SceOpenPolicy",
        "SceProcessSecurityPolicyGPO",
        "SceProcessSecurityPolicyGPOEx",
        "SceSysPrep",
        "SceAddToNameList",
        "SceAddToNameStatusList",
        "SceAddToObjectList",
        "SceAnalyzeSystem",
        "SceAppendSecurityProfileInfo",
        "SceBrowseDatabaseTable",
        "SceCloseProfile",
        "SceCommitTransaction",
        "SceCompareNameList",
        "SceCompareSecurityDescriptors",
        "SceConfigureSystem",
        "SceCopyBaseProfile",
        "SceCreateDirectory",
        "SceDcPromoCreateGPOsInSysvol",
        "SceDcPromoCreateGPOsInSysvolEx",
        "SceDcPromoteSecurity",
        "SceDcPromoteSecurityEx",
        "SceEnforceSecurityPolicyPropagation",
        "SceEnumerateServices",
        "SceFreeMemory",
        "SceFreeProfileMemory",
        "SceGenerateRollback",
        "SceGetAnalysisAreaSummary",
        "SceGetAreas",
        "SceGetDatabaseSetting",
        "SceGetDbTime",
        "SceGetObjectChildren",
        "SceGetObjectSecurity",
        "SceGetScpProfileDescription",
        "SceGetSecurityProfileInfo",
        "SceGetServerProductType",
        "SceGetTimeStamp",
        "SceIsSystemDatabase",
        "SceLookupPrivRightName",
        "SceOpenProfile",
        "SceRegisterRegValues",
        "SceRollbackTransaction",
        "SceSetDatabaseSetting",
        "SceSetupBackupSecurity",
        "SceSetupConfigureServices",
        "SceSetupGenerateTemplate",
        "SceSetupMoveSecurityFile",
        "SceSetupRootSecurity",
        "SceSetupSystemByInfName",
        "SceSetupUnwindSecurityFile",
        "SceSetupUpdateSecurityFile",
        "SceSetupUpdateSecurityKey",
        "SceSetupUpdateSecurityService",
        "SceStartTransaction",
        "SceSvcConvertSDToText",
        "SceSvcConvertTextToSD",
        "SceSvcFree",
        "SceSvcGetInformationTemplate",
        "SceSvcQueryInfo",
        "SceSvcSetInfo",
        "SceSvcSetInformationTemplate",
        "SceSvcUpdateInfo",
        "SceUpdateObjectInfo",
        "SceUpdateSecurityProfile",
        "SceWriteSecurityProfileInfo",
    },
    "ole32.dll": {
        "OleLoad",
        "GetRunningObjectTable",
        "OleFlushClipboard",
        "OleSetClipboard",
        "OleGetClipboard",
    },
    "cygwin1.dll": {
        "connect",
        "recv",
        "send",
        "socket",
    },
    "ws2_32.dll": {
        "accept",
        "bind",
        "closesocket",
        "connect",
        "getpeervalue",
        "getsockvalue",
        "getsockopt",
        "htonl",
        "htons",
        "ioctlsocket",
        "inet_addr",
        "inet_ntoa",
        "listen",
        "ntohl",
        "ntohs",
        "recv",
        "recvfrom",
        "select",
        "send",
        "sendto",
        "setsockopt",
        "shutdown",
        "socket",
        "GetAddrInfo",
        "GetvalueInfo",
        "WSApSetPostRoutine",
        "WPUCompleteOverlappedRequest",
        "WSAAccept",
        "WSAAddressToString",
        "WSACloseEvent",
        "WSAConnect",
        "WSACreateEvent",
        "WSADuplicateSocket",
        "WSAEnumvalueSpaceProviders",
        "WSAEnumNetworkEvents",
        "WSAEnumProtocols",
        "WSAEnumProtocols",
        "WSAEventSelect",
        "WSAGetOverlappedResult",
        "WSAGetQOSByvalue",
        "WSAGetServiceClassInfo",
        "WSAGetServiceClassvalueByClassId",
        "WSAHtonl",
        "WSAHtons",
        "gethostbyaddr",
        "gethostbyvalue",
        "getprotobyvalue",
        "getprotobynumber",
        "getservbyvalue",
        "getservbyport",
        "gethostvalue",
        "WSAInstallServiceClass",
        "WSALookupServiceBegin",
        "WSALookupServiceEnd",
        "WSALookupServiceNext",
        "WSANSPIoctl",
        "WSANtohl",
        "WSANtohs",
        "WSAProviderConfigChange",
        "WSARecv",
        "WSARecvDisconnect",
        "WSARecvFrom",
        "WSARemoveServiceClass",
        "WSAResetEvent",
        "WSASend",
        "WSASendDisconnect",
        "WSASendTo",
        "WSASetEvent",
        "WSASetService",
        "WSAStringToAddress",
        "WSAWaitForMultipleEvents",
        "WSCDeinstallProvider",
        "WSCEnableNSProvider",
        "WSCEnumProtocols",
        "WSCGetProviderPath",
        "WSCInstallvalueSpace",
        "WSCInstallProvider",
        "WSCUnInstallvalueSpace",
        "WSCUpdateProvider",
        "WSCWritevalueSpaceOrder",
        "WSCWriteProviderOrder",
        "WSAAsyncSelect",
        "WSAAsyncGetHostByAddr",
        "WSAAsyncGetHostByvalue",
        "WSAAsyncGetProtoByNumber",
        "WSAAsyncGetProtoByvalue",
        "WSAAsyncGetServByPort",
        "WSAAsyncGetServByvalue",
        "WSACancelAsyncRequest",
        "WSASetBlockingHook",
        "WSAUnhookBlockingHook",
        "WSAGetLastError",
        "WSASetLastError",
        "WSACancelBlockingCall",
        "WSAIsBlocking",
        "WSAStartup",
        "WSACleanup",
        "__WSAFDIsSet",
        "WEP",
    },
    "wsock32.dll": {
        "accept",
        "bind",
        "closesocket",
        "connect",
        "getpeername",
        "getsockname",
        "getsockopt",
        "htonl",
        "htons",
        "inet_addr",
        "inet_ntoa",
        "ioctlsocket",
        "listen",
        "ntohl",
        "ntohs",
        "recv",
        "recvfrom",
        "select",
        "send",
        "sendto",
        "setsockopt",
        "shutdown",
        "socket",
        "gethostbyaddr",
        "gethostbyname",
        "getprotobyname",
        "getprotobynumber",
        "getservbyname",
        "getservbyport",
        "gethostname",
        "WSAAsyncSelect",
        "WSAAsyncGetHostByAddr",
        "WSAAsyncGetHostByName",
        "WSAAsyncGetProtoByNumber",
        "WSAAsyncGetProtoByName",
        "WSAAsyncGetServByPort",
        "WSAAsyncGetServByName",
        "WSACancelAsyncRequest",
        "WSASetBlockingHook",
        "WSAUnhookBlockingHook",
        "WSAGetLastError",
        "WSASetLastError",
        "WSACancelBlockingCall",
        "WSAIsBlocking",
        "WSAStartup",
        "WSACleanup",
        "__WSAFDIsSet",
    },
    "winmm.dll": {
        "timeGetTime",
    },
    "wship6.dll": {
        "WSHAddressToString",
        "WSHEnumProtocols",
        "WSHGetProviderGuid",
        "WSHGetSockaddrType",
        "WSHGetSocketInformation",
        "WSHGetWSAProtocolInfo",
        "WSHGetWildcardSockaddr",
        "WSHGetWinsockMapping",
        "WSHIoctl",
        "WSHJoinLeaf",
        "WSHNotify",
        "WSHOpenSocket2",
        "WSHOpenSocket",
        "WSHSetSocketInformation",
        "WSHStringToAddress",
    },
    "clbcatq.dll": {
        "CheckMemoryGates",
    },
    "icmp.dll": {
        "IcmpCreateFile",
        "IcmpParseReplies",
        "IcmpCloseHandle",
        "IcmpSendEcho",
        "IcmpSendEcho2",
        "do_echo_req",
        "register_icmp",
    },
    "wtsapi32.dll": {
        "WTSDisconnectSession",
        "WTSQuerySessionInformation",
        "WTSEnumerateServers",
        "WTSUnRegisterSessionNotification",
        "WTHelperGetProvSignerFromChain",
        "WTHelperProvDataFromStateData",
        "WaitForThreadpoolTimerCallbacks",
        "WTSFreeMemory",
        "WTSQueryUserToken",
        "WTSSendMessage",
        "WTSLogoffSession",
        "WTSSetSessionInformation",
        "WTSEnumerateSessions",
        "WTSEnumerateProcesses",
        "WTSVirtualChannelOpen",
        "WTSCloseServer",
        "WTSConnectSession",
        "WTSCreateListener",
        "WTSRegisterSessionNotification",
        "WTSRegisterSessionNotificationEx",
        "WTSStartRemoteControlSession",
        "WTSVirtualChannelPurgeInput",
    },
    "fveapi.dll": {
        "FveEnableRawAccess",
    },
    "winscard.dll": {
        "SCardControl",
        "SCardDisconnect",
        "SCardBeginTransaction",
        "SCardEndTransaction",
        "SCardEstablishContext",
        "SCardReconnect",
        "SCardStatus",
        "SCardTransmit",
        "SCardReleaseStartedEvent",
        "SCardAccessStartedEvent",
        "SCardReleaseContext",
        "SCardListReaders",
    },
    "ntdll.dll": {
        "DbgUiConnectToDbg",
        "DbgUiDebugActiveProcess",
        "NtDeleteKey",
        "ZwDeleteKey",
        "ZwDeleteValueKey",
        "ZwSetValueKey",
        "ZwSaveKey",
        "ZwSaveKeyEx",
        "NtAcceptConnectPort",
        "NtCompleteConnectPort",
        "NtReplyPort",
        "NtCreateWaitablePort",
        "NtReplyWaitReceivePort",
        "NtSuspendProcess",
        "NtResumeProcess",
        "NtResumeThread",
        "NtSetContextThread",
        "NtSetInformationToken",
        "NtQueryInformationProcess",
        "NtSetInformationProcess",
        "NtSetInformationThread",
        "NtCreateUserProcess",
        "NtTerminateProcess",
        "NtWow64CsrGetProcessId",
        "NtWow64GetCurrentProcessorNumberEx",
        "NtWow64QueryInformationProcess64",
        "NtOpenProcess",
        "NtCreateProcess",
        "NtCreateProcessEx",
        "NtDelayExecution",
        "NtOpenProcessToken",
        "NtQueryInformationThread",
        "RtlUserThreadStart",
        "ZwQueryInformationProcess",
        "ZwTerminateProcess",
        "ZwTerminateThread",
        "NtProtectVirtualMemory",
        "NtQueryVirtualMemory",
        "NtWow64QueryVirtualMemory64",
        "NtWow64ReadVirtualMemory64",
        "NtWow64WriteVirtualMemory64",
        "NtWriteVirtualMemory",
        "NtAllocateVirtualMemory",
        "NtReadVirtualMemory",
        "RtlMoveMemory",
        "ZwAllocateVirtualMemory",
        "ZwQueryVirtualMemory",
        "ZwReadVirtualMemory",
        "ZwWriteVirtualMemory",
        "NtCreateFile",
        "NtQueryDirectoryFile",
        "NtDeleteFile",
        "NtSetInformationFile",
        "NtWriteFile",
        "NtQueryInformationFile",
        "NtOpenFile",
        "ZwQueryInformationFile",
        "DbgPrintEx",
        "EtwEventWrite",
        "EtwEventRegister",
        "EtwEventUnregister",
        "EtwUnregisterTraceGuids",
        "EtwRegisterTraceGuids",
        "EtwGetTraceLoggerHandle",
        "EtwGetTraceEnableLevel",
        "EtwGetTraceEnableFlags",
        "EtwTraceMessage",
        "LdrGetKnownDllSectionHandle",
        "LdrAccessResource",
        "LdrAddLoadAsDataTable",
        "LdrAddRefDll",
        "LdrDisableThreadCalloutsForDll",
        "LdrEnumResources",
        "LdrEnumerateLoadedModules",
        "LdrFindEntryForAddress",
        "LdrFindResourceDirectory_U",
        "LdrFindResourceEx_U",
        "LdrFindResource_U",
        "LdrFlushAlternateResourceModules",
        "LdrGetDllHandle",
        "LdrGetDllHandleByMapping",
        "LdrGetDllHandleByName",
        "LdrGetDllHandleEx",
        "LdrGetFailureData",
        "LdrGetFileNameFromLoadAsDataTable",
        "LdrGetProcedureAddress",
        "LdrGetProcedureAddressEx",
        "LdrHotPatchRoutine",
        "LdrInitShimEngineDynamic",
        "LdrInitializeThunk",
        "LdrLoadAlternateResourceModule",
        "LdrLoadAlternateResourceModuleEx",
        "LdrLoadDll",
        "LdrLockLoaderLock",
        "LdrOpenImageFileOptionsKey",
        "LdrProcessRelocationBlock",
        "LdrQueryImageFileExecutionOptions",
        "LdrQueryImageFileExecutionOptionsEx",
        "LdrQueryImageFileKeyOption",
        "LdrQueryModuleServiceTags",
        "LdrQueryProcessModuleInformation",
        "LdrRegisterDllNotification",
        "LdrRemoveLoadAsDataTable",
        "LdrResFindResource",
        "LdrResFindResourceDirectory",
        "LdrResGetRCConfig",
        "LdrResRelease",
        "LdrResSearchResource",
        "LdrRscIsTypeExist",
        "LdrSetAppCompatDllRedirectionCallback",
        "LdrSetDllManifestProber",
        "LdrSetMUICacheType",
        "LdrShutdownProcess",
        "LdrShutdownThread",
        "LdrSystemDllInitBlock",
        "LdrUnloadAlternateResourceModule",
        "LdrUnloadAlternateResourceModuleEx",
        "LdrUnloadDll",
        "LdrUnlockLoaderLock",
        "LdrUnregisterDllNotification",
        "LdrVerifyImageMatchesChecksum",
        "LdrVerifyImageMatchesChecksumEx",
        "LdrWx86FormatVirtualImage",
        "LdrpResGetMappingSize",
        "LdrpResGetResourceDirectory",
        "NtDisplayString",
        "NtRaiseHardError",
        "NtGetContextThread",
        "NtLoadDriver",
        "NtUnloadDriver",
        "NtShutdownSystem",
        "NtUnmapViewOfSection",
        "NtSetEvent",
        "NtOpenSection",
        "NtOpenEvent",
        "NtMapViewOfSection",
        "NtAddAtom",
        "NtFindAtom",
        "NtDeleteAtom",
        "NtQuerySystemInformation",
        "NtQueryInformationAtom",
        "NtAccessCheckByTypeResultListAndAuditAlarm",
        "NtCompareTokens",
        "NtQueryObject",
        "NtContinue",
        "NtFsControlFile",
        "NtCreateThread",
        "NtCreateThreadEx",
        "NtImpersonateAnonymousToken",
        "NtOpenThreadToken",
        "NtOpenSymbolicLinkObject",
        "NtSetSecurityObject",
        "NtVdmControl",
        "NtWow64CallFunction64",
        "NtWow64CsrAllocateCaptureBuffer",
        "NtWow64CsrAllocateMessagePointer",
        "NtWow64CsrCaptureMessageBuffer",
        "NtWow64CsrCaptureMessageString",
        "NtWow64CsrClientCallServer",
        "NtWow64CsrClientConnectToServer",
        "NtWow64CsrFreeCaptureBuffer",
        "NtWow64CsrIdentifyAlertableThread",
        "NtWow64CsrVerifyRegion",
        "NtWow64DebuggerCall",
        "NtWow64GetNativeSystemInformation",
        "NtWow64InterlockedPopEntrySList",
        "NtQuerySymbolicLinkObject",
        "NtAdjustPrivilegesToken",
        "NtCreateSection",
        "RtlQueryRegistryValues",
        "RtlAdjustPrivilege",
        "RtlAbsoluteToSelfRelativeSD",
        "RtlAbsoluteToSelfRelativeSD",
        "RtlAddAccessAllowedAce",
        "RtlAddAccessAllowedAce",
        "RtlGetDaclSecurityDescriptor",
        "RtlGetGroupSecurityDescriptor",
        "RtlGetOwnerSecurityDescriptor",
        "RtlGetSaclSecurityDescriptor",
        "RtlLengthSecurityDescriptor",
        "RtlSetDaclSecurityDescriptor",
        "RtlSetOwnerSecurityDescriptor",
        "RtlCreateSecurityDescriptor",
        "RtlAllocateAndInitializeSid",
        "RtlFormatCurrentUserKeyPath",
        "RtlSetProcessIsCritical",
        "RtlQueryElevationFlags",
        "RtlDelete",
        "RtlNtStatusToDosError",
        "RtlRandom",
        "RtlCompressBuffer",
        "RtlComputeCrc32",
        "RtlDecompressBuffer",
        "RtlGetCompressionWorkSpaceSize",
        "RtlTimeToSecondsSince1970",
        "RtlExitUserThread",
        "WinSqmAddToAverageDWORD",
        "WinSqmAddToStream",
        "WinSqmAddToStreamEx",
        "WinSqmCheckEscalationAddToStreamEx",
        "WinSqmCheckEscalationSetDWORD64",
        "WinSqmCheckEscalationSetDWORD",
        "WinSqmCheckEscalationSetString",
        "WinSqmCommonDatapointDelete",
        "WinSqmCommonDatapointSetDWORD64",
        "WinSqmCommonDatapointSetDWORD",
        "WinSqmCommonDatapointSetStreamEx",
        "WinSqmCommonDatapointSetString",
        "WinSqmEndSession",
        "WinSqmEventEnabled",
        "WinSqmEventWrite",
        "WinSqmGetEscalationRuleStatus",
        "WinSqmGetInstrumentationProperty",
        "WinSqmIncrementDWORD",
        "WinSqmIsOptedIn",
        "WinSqmIsOptedInEx",
        "WinSqmSetDWORD64",
        "WinSqmSetDWORD",
        "WinSqmSetEscalationInfo",
        "WinSqmSetIfMaxDWORD",
        "WinSqmSetIfMinDWORD",
        "WinSqmSetString",
        "WinSqmStartSession",
        "ZwClose",
        "ZwDisplayString",
        "ZwRequestPort",
        "ZwMapViewOfSection",
        "ZwUnmapViewOfSection",
        "ZwResumeThread",
        "ZwQuerySystemInformation",
        "ZwSetLdtEntries",
        "ZwDuplicateToken",
        "ZwCallbackReturn",
        "ZwQueryInformationThread",
        "ZwCreateSection",
        "KiUserExceptionDispatcher",
        "KiUserCallbackDispatcher",
        "KiUserApcDispatcher",
        "KiRaiseUserExceptionDispatcher",
        "KiIntSystemCall",
        "KiFastSystemCallRet",
        "KiFastSystemCall",
    },
    "netapi32.dll": {
        "NetJoinDomain",
        "NetUseAdd",
        "Netbios",
        "NetFileClose",
        "NetAuditRead",
        "NetConfigSet",
        "NetErrorLogWrite",
        "NetErrorLogClear",
        "NetAuditClear",
        "NetErrorLogRead",
        "NetWkstaUserGetInfo",
        "NetWkstaGetInfo",
        "NetpwNameValidate",
        "NetFileGetInfo",
        "NetSessionEnum",
        "NetShareGetInfo",
        "NetShareEnum",
        "NetShareAdd",
        "NetShareDel",
        "NetWkstaUserEnum",
        "NetServerGetInfo",
        "NetAccessEnum",
        "NetBrowserStatisticsGet",
        "NetConnectionEnum",
        "NetWkstaTransportEnum",
        "NetGetJoinInformation",
        "NetUserAdd",
        "NetUserEnum",
        "NetUserGetInfo",
        "NetUserSetInfo",
        "NetUserDel",
        "NetUserGetGroups",
        "NetUserSetGroups",
        "NetUserGetLocalGroups",
        "NetUserModalsGet",
        "NetUserModalsSet",
        "NetUserChangePassword",
        "NetGroupAdd",
        "NetGroupAddUser",
        "NetGroupEnum",
        "NetGroupGetInfo",
        "NetGroupSetInfo",
        "NetGroupDel",
        "NetGroupDelUser",
        "NetGroupGetUsers",
        "NetGroupSetUsers",
        "NetStatisticsGet",
        "NetLocalGroupAdd",
        "NetLocalGroupAddMember",
        "NetLocalGroupEnum",
        "NetLocalGroupGetInfo",
        "NetLocalGroupSetInfo",
        "NetLocalGroupDel",
        "NetLocalGroupDelMember",
        "NetLocalGroupGetMembers",
        "NetLocalGroupSetMembers",
        "NetLocalGroupAddMembers",
        "NetLocalGroupDelMembers",
        "NetQueryDisplayInformation",
        "NetGetDisplayInformationIndex",
        "NetAccessAdd",
        "NetAccessGetInfo",
        "NetAccessSetInfo",
        "NetAccessDel",
        "NetAccessGetUserPerms",
        "NetValidatePasswordPolicy",
        "NetValidatePasswordPolicyFree",
        "NetGetDCName",
        "NetGetAnyDCName",
        "I_NetLogonControl",
        "I_NetLogonControl2",
        "NetEnumerateTrustedDomains",
        "NetRemoteTOD",
        "NetServerEnum",
        "NetServiceEnum",
    },
    "comctl32.dll": {
        "_TrackMouseEvent",
    },
    "cryptbase.dll": {
        "SystemFunction001",
        "SystemFunction002",
        "SystemFunction003",
        "SystemFunction004",
        "SystemFunction005",
        "SystemFunction028",
        "SystemFunction029",
        "SystemFunction034",
        "SystemFunction036",
        "SystemFunction040",
        "SystemFunction041",
    },
    "mprapi.dll": {
        "DeletePort",
        "MprAdminUserWrite",
        "MprAdminUserGetInfo",
        "MprAdminUserUserOpen",
        "MprAdminUserUserClose",
        "MprAdminUserRead",
        "MprAdminUserOpen",
        "MprAdminUserClose",
    },
    "sfc.dll": {
        "SfcIsFileProtected",
        "SfcIsKeyProtected",
        "SfcGetNextProtectedFile",
        "SfcGetFiles",
        "SFCDisable",
        "SFCScan",
        "SRSetRestorePoint",
        "SfpVerifyFile",
    },
    "atl90.dll": {
        "AtlComModuleRegisterClassObjects",
        "AtlComModuleRevokeClassObjects",
        "AtlUpdateRegistryFromResourceD",
        "AtlRegisterClassCategoriesHelper",
        "AtlLoadTypeLib",
        "AtlCreateRegistrar",
        "AtlCallTermFunc",
        "AtlSetPerUserRegistration",
        "AtlGetPerUserRegistration",
    },
    "winspool.drv": {
        "EnumMonitors",
        "AddPrintProcessor",
        "DeletePort",
        "DeletePrinter",
        "DeletePrinterConnection",
        "DeletePrintProcessor",
        "EnumPorts",
        "GetPrinterDriverDirectory",
        "GetPrintProcessorDirectory",
    },
    "advapi32.dll": {
        "QueryRecoveryAgentsOnEncryptedFile",
        "RemoveUsersFromEncryptedFile",
        "FreeEncryptionCertificateHashList",
        "QueryUsersOnEncryptedFile",
        "SystemFunction001",
        "SystemFunction002",
        "SystemFunction003",
        "SystemFunction004",
        "SystemFunction005",
        "SystemFunction006",
        "SystemFunction007",
        "SystemFunction008",
        "SystemFunction009",
        "SystemFunction010",
        "SystemFunction011",
        "SystemFunction012",
        "SystemFunction013",
        "SystemFunction014",
        "SystemFunction015",
        "SystemFunction016",
        "SystemFunction017",
        "SystemFunction018",
        "SystemFunction019",
        "SystemFunction020",
        "SystemFunction021",
        "SystemFunction022",
        "SystemFunction023",
        "SystemFunction024",
        "SystemFunction025",
        "SystemFunction026",
        "SystemFunction027",
        "SystemFunction028",
        "SystemFunction029",
        "SystemFunction030",
        "SystemFunction031",
        "SystemFunction032",
        "SystemFunction033",
        "SystemFunction034",
        "SystemFunction035",
        "SystemFunction036",
        "SystemFunction037",
        "SystemFunction038",
        "SystemFunction039",
        "SystemFunction040",
        "SystemFunction041",
        "ChangeServiceConfig2",
        "ChangeServiceConfig",
        "DeleteService",
        "CreateService",
        "LsaIQueryInformationPolicyTrusted",
        "LsaStorePrivateData",
        "LsaCreateTrustedDomainEx",
        "LsaCreateAccount",
        "LsaCreateSecret",
        "LsaCreateTrustedDomain",
        "LsaEnumerateAccounts",
        "LsaEnumerateAccountsWithUserRight",
        "LsaRetrievePrivateData",
        "LsaSetInformationPolicy",
        "LsaSetInformationTrustedDomain",
        "LsaSetQuotasForAccount",
        "LsaOpenSecret",
        "LsaSetSecurityObject",
        "LsaQueryTrustedDomainInfo",
        "LsaQueryInformationPolicy",
        "LsaEnumerateTrustedDomains",
        "LsaAddAccountRights",
        "LsaSetSecret",
        "LsaEnumeratePrivilegesOfAccount",
        "LsaOpenPolicy",
        "LsaEnumerateAccountRights",
        "LsaFreeMemory",
        "LsaDeleteTrustedDomain",
        "GetTraceEnableFlags",
        "CryptSignHash",
        "InstallApplication",
        "SaferIdentifyLevel",
        "ConvertSecurityDescriptorToAccessNamed",
        "ConvertStringSDToSDRootDomain",
        "SetEntriesInAccessList",
        "SetNamedSecurityInfoEx",
        "MakeAbsoluteSD",
        "MakeAbsoluteSD2",
        "GetTraceLoggerHandle",
        "GetOverlappedAccessResults",
        "TrusteeAccessToObject",
        "ConvertAccessToSecurityDescriptor",
        "SetEntriesInAuditList",
        "SetSecurityInfoEx",
        "SetEntriesInAuditList",
        "ConvertSecurityDescriptorToAccess",
        "ElfRegisterEventSource",
        "ElfBackupEventLogFile",
        "ElfChangeNotify",
        "ElfClearEventLogFile",
        "ElfCloseEventLog",
        "ElfDeregisterEventSource",
        "ElfFlushEventLog",
        "ElfNumberOfRecords",
        "ElfOldestRecord",
        "ElfOpenBackupEventLog",
        "ElfOpenEventLog",
        "ElfReadEventLog",
        "ElfReportEvent",
        "ElfReportEventAndSource",
        "UnregisterTraceGuids",
        "SaferiIsExecutableFileType",
        "WmiCloseBlock",
        "WmiFileHandleToInstanceName",
        "BackupEventLog",
        "ClearEventLog",
        "CloseEventLog",
        "DeregisterEventSource",
        "GetEventLogInformation",
        "GetNumberOfEventLogRecords",
        "GetOldestEventLogRecord",
        "NotifyChangeEventLog",
        "OpenBackupEventLog",
        "OpenEventLog",
        "ReadEventLog",
        "RegisterEventSource",
        "ReportEvent",
        "SaferRecordEventLogEntry",
        "GetCurrentHwProfile",
        "CredEnumerate",
        "CredFree",
        "CredDelete",
        "CredFindBestCredential",
        "CredGetSessionTypes",
        "CredGetTargetInfo",
        "CredIsMarshaledCredential",
        "CredIsProtected",
        "CredMarshalCredential",
        "CredPackAuthenticationBuffer",
        "CredProtect",
        "CredRead",
        "CredReadDomainCredentials",
        "CredRename",
        "CredUnmarshalCredential",
        "CredUnPackAuthenticationBuffer",
        "CredUnprotect",
        "CredWrite",
        "CredWriteDomainCredentials",
        "StartTrace",
        "CloseTrace",
        "ProcessTrace",
        "FlushTrace",
        "OpenTrace",
        "GetAuditedPermissionsFromAcl",
        "QueryAllTraces",
        "GetAuditedPermissionsFromAcl",
        "ConvertSecurityDescriptorToStringSecurityDescriptor",
        "SetEntriesInAcl",
        "LockServiceDatabase",
        "GetNumberOfEventLogRecords",
        "GetOldestEventLogRecord",
        "BackupEventLog",
        "NotifyChangeEventLog",
        "ConvertStringSecurityDescriptorToSecurityDescriptor",
        "DeregisterEventSource",
        "ConvertSidToStringSid",
        "ReportEvent",
        "GetTraceEnableLevel",
        "AbortSystemShutdown",
        "ControlTrace",
        "LookupPrivilegeValue",
        "NotifyBootConfigStatus",
        "SetNamedSecurityInfo",
        "LogonUser",
        "InitiateSystemShutdown",
        "InitiateSystemShutdownEx",
    },
    "secur32.dll": {
        "EncryptMessage",
        "DecryptMessage",
        "LsaLookupAuthenticationPackage",
        "LsaDeregisterLogonProcess",
        "LsaConnectUntrusted",
        "LsaFreeReturnBuffer",
        "GetUserNameEx",
        "DeleteSecurityContext",
        "DdeSetQualityOfService",
    },
    "mpr.dll": {
        "MultinetGetConnectionPerformance",
        "WNetAddConnection",
        "WNetAddConnection2",
        "WNetAddConnection3",
        "WNetCloseEnum",
        "WNetEnumResource",
        "WNetGetConnection",
        "WNetGetNetworkInformation",
        "WNetGetProviderName",
        "WNetGetResourceParent",
        "WNetGetResourceInformation",
        "WNetGetUniversalName",
        "WNetGetUser",
        "WNetOpenEnum",
        "WNetRestoreConnection",
        "WNetUseConnection",
        "WNetCancelConnection",
        "WNetAddConnection2",
        "WNetCancelConnection2",
        "WNetGetConnection",
        "WNetUseConnection",
        "WNetDirectoryNotify",
    },
    "winhttp.dll": {
        "WinHttpCrackUrl",
        "WinHttpSetTimeouts",
        "WinHttpSetCredentials",
        "WinHttpQueryAuthSchemes",
        "WinHttpQueryHeaders",
        "WinHttpConnect",
        "WinHttpGetIEProxyConfigForCurrentUser",
        "WinHttpGetProxyForUrl",
        "WinHttpReceiveResponse",
        "WinHttpSendRequest",
        "WinHttpSetOption",
        "WinHttpWriteData",
        "WinHttpAddRequestHeaders",
        "WinHttpSetStatusCallback",
    },
    "ntdsapi.dll": {
        "DsListSites",
        "DsFreePasswordCredentials",
        "DsFreeNameResult",
        "DsUnBind",
        "DsBind",
        "DsMapSchemaGuids",
        "DsCrackSpn",
        "DsFreeDomainControllerInfo",
        "DsMakeSpn",
        "DsGetDomainControllerInfo",
        "DsQuoteRdnValue",
        "DsFreeSchemaGuidMap",
    },
    "nddeapi.dll": {
        "NDdeShareAdd",
        "NDdeShareDel",
        "NDdeShareEnum",
        "NDdeShareGetInfo",
        "NDdeShareSetInfo",
        "NDdeGetErrorString",
        "NDdeIsValidShareName",
        "NDdeIsValidAppTopicList",
        "NDdeSpecialCommand",
        "NDdeGetShareSecurity",
        "NDdeSetShareSecurity",
        "NDdeGetTrustedShare",
        "NDdeSetTrustedShare",
        "NDdeTrustedShareEnum",
        "NDdeShareAdd",
        "NDdeShareDel",
        "NDdeShareEnum",
        "NDdeShareGetInfo",
        "NDdeShareSetInfo",
        "NDdeGetErrorString",
        "NDdeIsValidShareName",
        "NDdeIsValidAppTopicList",
        "NDdeSpecialCommand",
        "NDdeGetShareSecurity",
        "NDdeSetShareSecurity",
        "NDdeGetTrustedShare",
        "NDdeSetTrustedShare",
        "NDdeTrustedShareEnum",
    },
    "shell32.dll": {
        "SHGetInstanceExplorer",
        "SHGetKnownFolderPath",
        "SHCreateProcessAsUserW",
        "ShellExecute",
        "ShellExecCmdLine",
        "SHGetSpecialFolderLocation",
        "SHGetFileInfo",
        "SHFileOperation",
        "SHCreateDirectory",
        "SHBrowseForFolder",
        "SHGetPathFromIDList",
        "SHQueryRecycleBin",
        "SHFlushClipboard",
        "SHGetSpecialFolderPath",
        "SHChangeNotifySuspendResume",
        "SHChangeNotifyRegister",
        "SHChangeNotifyDeregister",
        "OpenAs_RunDLL",
        "SHGetNewLinkInfo",
        "ILCreateFromPath",
        "ShellExec_RunDLL",
        "SHFormatDrive",
        "SHCreateDirectoryEx",
        "RegenerateUserEnvironment",
        "RealShellExecuteW",
        "RealShellExecuteEx",
        "RealShellExecute",
        "Options_RunDLL",
        "GetCurrentProcessExplicitAppUserModelID",
        "FindExecutable",
        "DoEnvironmentSubst",
        "DllInstall",
        "DllGetVersion",
        "WOWShellExecute",
        "WaitForExplorerRestartW",
        "SHFlushSFCache",
        "SHChangeNotification_Lock",
        "WriteCabinetState",
        "ReadCabinetState",
        "IsUserAnAdmin",
        "Control_RunDLL",
        "Control_RunDLLAsUser",
        "SHTestTokenMembership",
        "AppCompat_RunDLLW",
        "SHHelpShortcuts_RunDLL",
        "SHChangeNotify",
        "SHChangeNotifyDeregister",
        "SHEmptyRecycleBin",
        "SHLoadInProc",
        "SHGetNoAssocIconIndex",
        "SHGetUserDisplayName",
        "SHGetUserPicturePath",
        "SHGetUserPicturePathEx",
        "SHHelpShortcut_RunDLL",
        "SHHelpShortcuts_RunDLL",
        "ShortSizeFormatExport",
        "SHResolveUserNames",
        "SHSettingsChanged",
        "SHSetUserPicturePath",
        "SHShouldShowWizards",
        "SHTestTokenPrivilegeW",
        "SHAnsiToUnicodeCPAlloc",
        "SHAreIconsEqual",
        "SHBoolSystemParametersInfo",
        "SHCreatePropertyBagOnMemory",
        "SHCreatePropertyStoreOnXML",
        "SHCreateStreamOnDllResourceW",
        "SHCreateStreamOnModuleResourceW",
        "SHExpandEnvironmentStringsAlloc",
        "SHForwardContextMenuMsg",
        "SHGetSizeShared",
        "SHInvokeCommandOnContextMenu",
        "SHInvokeCommandOnContextMenuEx",
        "SHInvokeCommandsOnContextMenuEx",
        "SHInvokeCommandWithFlagsAndSite",
        "SHRegSetValue",
        "SHUnicodeToAnsiCPAlloc",
        "RegisterShellHookWindow",
    },
    "psapi.dll": {
        "EmptyWorkingSet",
        "EnumDeviceDrivers",
        "EnumPageFiles",
        "EnumProcesses",
        "EnumProcessModules",
        "EnumProcessModulesEx",
        "GetProcessImageFileName",
        "InitializeProcessForWsWatch",
        "GetModuleBaseName",
        "GetModuleFileNameEx",
        "GetMappedFileName",
        "GetDeviceDriverBaseName",
        "GetDeviceDriverBaseName",
        "GetDeviceDriverFileName",
        "GetMappedFileName",
        "GetModuleInformation",
        "GetPerformanceInfo",
        "GetWsChanges",
        "GetWsChangesEx",
        "QueryWorkingSet",
        "QueryWorkingSetEx",
    },
    "fwpuclnt.dll": {
        "WSASetSocketPeerTargetName",
        "WSADeleteSocketPeerTargetName",
        "WSAImpersonateSocketPeer",
        "WSAQuerySocketSecurity",
        "WSARevertImpersonation",
    },
    "mapi32.dll": {
        "MAPILogonEx",
        "MAPIAllocateBuffer",
        "MAPIFreeBuffer",
        "MAPIInitialize",
        "MAPIUninitialize",
        "BuildDisplayTable",
        "HrQueryAllRows",
        "FreePadrlist",
        "FreeProws",
        "BMAPISendMail",
        "BMAPISaveMail",
        "BMAPIReadMail",
        "BMAPIGetReadMail",
        "BMAPIFindNext",
        "BMAPIAddress",
        "BMAPIGetAddress",
        "BMAPIDetails",
        "BMAPIResolveName",
    },
    "wininet.dll": {
        "InternetSecurityProtocolToString",
        "InternetAttemptConnect",
        "UrlZonesDetach",
        "InternetAutodial",
        "InternetAutodialHangup",
        "DeleteUrlCacheEntry",
        "FindFirstUrlCacheEntry",
        "FindFirstUrlCacheContainer",
        "FindNextUrlCacheContainer",
        "FindNextUrlCacheEntry",
        "FindCloseUrlCache",
        "GetUrlCacheEntryInfo",
        "GetUrlCacheEntryInfoEx",
        "HttpSendRequest",
        "HttpSendRequestEx",
        "HttpQueryInfo",
        "HttpAddRequestHeaders",
        "HttpEndRequest",
        "HttpOpenRequest",
        "InternetGetConnectedState",
        "InternetGetConnectedStateEx",
        "InternetWriteFile",
        "InternetOpenUrl",
        "InternetQueryDataAvailable",
        "InternetGetCookie",
        "InternetCheckConnection",
        "InternetQueryOption",
        "InternetSetStatusCallback",
        "InternetSetOption",
        "InternetErrorDlg",
        "InternetCloseHandle",
        "InternetOpen",
        "InternetConnect",
        "InternetCrackUrl",
        "InternetCanonicalizeUrl",
        "InternetCombineUrl",
        "FtpDeleteFile",
        "FtpCommand",
        "FtpCreateDirectory",
        "FtpFindFirstFile",
        "FtpGetCurrentDirectory",
        "FtpGetFile",
        "FtpGetFileSize",
        "FtpOpenFile",
        "FtpPutFile",
        "FtpRemoveDirectory",
        "FtpRenameFile",
        "FtpSetCurrentDirectory",
        "ResumeSuspendedDownload",
    },
    "rpcrt4.dll": {
        "I_RpcMapWin32Status",
        "UuidCreateSequential",
        "UuidToString",
        "RpcMgmtSetServerStackSize",
        "RpcServerUnregisterIf",
        "RpcMgmtWaitServerListen",
        "RpcMgmtStopServerListening",
        "RpcServerUnregisterIfEx",
        "RpcServerRegisterIf",
        "RpcServerUseProtseqEp",
        "RpcServerListen",
        "RpcStringFree",
        "RpcServerTestCancel",
        "RpcStringBindingParse",
        "RpcMgmtInqServerPrincName",
        "UuidCreate",
        "NdrAsyncClientCall",
        "NdrClearOutParameters",
        "NdrClientCall",
        "NdrClientCall2",
        "NdrConformantArrayUnmarshall",
        "NdrConformantStringBufferSize",
        "NdrConformantStringMarshall",
        "NdrConformantStringUnmarshall",
        "NdrContextHandleInitialize",
        "NdrContextHandleSize",
        "NdrContextHandleMemorySize",
        "NdrConvert",
        "NdrCStdStubBuffer_Release",
        "NdrCStdStubBuffer2_Release",
        "NdrDllCanUnloadNow",
        "NdrDllGetClassObject",
        "NdrDllRegisterProxy",
        "NdrDllUnregisterProxy",
        "NdrGetUserMarshalInfo",
        "NdrInterfacePointerBufferSize",
        "NdrInterfacePointerFree",
        "NdrInterfacePointerMarshall",
        "NdrInterfacePointerUnmarshall",
        "NdrOleAllocate",
        "NdrOleFree",
        "NdrPointerBufferSize",
        "NdrPointerFree",
        "NdrPointerMarshall",
        "NdrPointerUnmarshall",
        "NdrProxyErrorHandler",
        "NdrProxyFreeBuffer",
        "NdrProxyGetBuffer",
        "NdrProxyInitialize",
        "NdrProxySendReceive",
        "NdrSimpleTypeMarshall",
        "NdrSimpleTypeUnmarshall",
        "NdrStubCall2",
        "NdrStubForwardingFunction",
        "NdrStubGetBuffer",
        "NdrStubInitialize",
        "NdrUserMarshalBufferSize",
        "NdrUserMarshalFree",
        "NdrUserMarshalMarshall",
    },
    "setupapi.dll": {
        "SetupDiGetDeviceRegistryProperty",
        "SetupDiGetClassDevs",
        "SetupDiEnumDeviceInfo",
        "SetupDiEnumDeviceInterfaces",
        "SetupDiGetDeviceInterfaceDetail",
        "SetupDiDestroyDeviceInfoList",
        "SetupDiOpenDevRegKey",
        "SetupDiClassGuidsFromNameEx",
    },
    "powrprof.dll": {
        "CallNtPowerInformation",
        "CanUserWritePwrScheme",
        "DeletePwrScheme",
        "DevicePowerClose",
        "DevicePowerEnumDevices",
        "DevicePowerOpen",
        "DevicePowerSetDeviceState",
        "EnumPwrSchemes",
        "GUIDFormatToGlobalPowerPolicy",
        "GUIDFormatToPowerPolicy",
        "GetActivePwrScheme",
        "GetCurrentPowerPolicies",
        "GetPwrCapabilities",
        "GetPwrDiskSpindownRange",
        "IsAdminOverrideActive",
        "IsPwrHibernateAllowed",
        "IsPwrShutdownAllowed",
        "IsPwrSuspendAllowed",
        "LoadCurrentPwrScheme",
        "MergeLegacyPwrScheme",
        "PowerApplyPowerRequestOverride",
        "PowerCanRestoreIndividualDefaultPowerScheme",
        "PowerCreatePossibleSetting",
        "PowerCreateSetting",
        "PowerCustomizePlatformPowerSettings",
        "PowerDebugDifPowerPolicies",
        "PowerDebugDifSystemPowerPolicies",
        "PowerDebugDumpPowerPolicy",
        "PowerDebugDumpPowerScheme",
        "PowerDebugDumpSystemPowerCapabilities",
        "PowerDebugDumpSystemPowerPolicy",
        "PowerDeleteScheme",
        "PowerDeterminePlatformRole",
        "PowerDuplicateScheme",
        "PowerEnumerate",
        "PowerGetActiveScheme",
        "PowerImportPowerScheme",
        "PowerOpenSystemPowerKey",
        "PowerOpenUserPowerKey",
        "PowerPolicyToGUIDFormat",
        "PowerReadACDefaultIndex",
        "PowerReadACValue",
        "PowerReadACValueIndex",
        "PowerReadDCDefaultIndex",
        "PowerReadDCValue",
        "PowerReadDCValueIndex",
        "PowerReadDescription",
        "PowerReadFriendlyName",
        "PowerReadIconResourceSpecifier",
        "PowerReadPossibleDescription",
        "PowerReadPossibleFriendlyName",
        "PowerReadPossibleValue",
        "PowerReadSecurityDescriptor",
        "PowerReadSettingAttributes",
        "PowerReadValueIncrement",
        "PowerReadValueMax",
        "PowerReadValueMin",
        "PowerReadValueUnitsSpecifier",
        "PowerRemovePowerSetting",
        "PowerReplaceDefaultPowerSchemes",
        "PowerRestoreDefaultPowerSchemes",
        "PowerRestoreIndividualDefaultPowerScheme",
        "PowerSetActiveScheme",
        "PowerSetAlsBrightnessOffset",
        "PowerSettingAccessCheck",
        "PowerSettingRegisterNotification",
        "PowerSettingUnregisterNotification",
        "PowerWriteACDefaultIndex",
        "PowerWriteACValueIndex",
        "PowerWriteDCDefaultIndex",
        "PowerWriteDCValueIndex",
        "PowerWriteDescription",
        "PowerWriteFriendlyName",
        "PowerWriteIconResourceSpecifier",
        "PowerWritePossibleDescription",
        "PowerWritePossibleFriendlyName",
        "PowerWritePossibleValue",
        "PowerWriteSecurityDescriptor",
        "PowerWriteSettingAttributes",
        "PowerWriteValueIncrement",
        "PowerWriteValueMax",
        "PowerWriteValueMin",
        "PowerWriteValueUnitsSpecifier",
        "ReadGlobalPwrPolicy",
        "ReadProcessorPwrScheme",
        "ReadPwrScheme",
        "SetActivePwrScheme",
        "SetSuspendState",
        "ValidatePowerPolicies",
        "WriteGlobalPwrPolicy",
        "WriteProcessorPwrScheme",
        "WritePwrScheme",
    },
    "ntoskrnl.exe": {
        "KeTickCount",
        "PsLookupProcessThreadByCid",
        "PsGetCurrentProcessId",
        "PsCreateSystemThread",
        "PsSetLoadImageNotifyRoutine",
        "PsSetCreateProcessNotifyRoutine",
        "CreateProcessNotify",
        "PsTerminateSystemThread",
        "PsLookupProcessByProcess",
        "PsLookupProcessByProcessId",
        "PsChargePoolQuota",
        "PsDereferenceImpersonationToken",
        "PsDereferencePrimaryToken",
        "PsIsDiskCountersEnabled",
        "PsGetProcessExitTime",
        "PsImpersonateClient",
        "PsIsThreadTerminating",
        "PsLookupThreadByThreadId",
        "PsReferenceImpersonationToken",
        "PsReferencePrimaryToken",
        "PsReturnPoolQuota",
        "PsRevertToSelf",
        "PsUpdateDiskCounters",
        "PsInitialSystemProcess",
        "KeServiceDescriptorTable",
        "KeAddSystemServiceTable",
        "KeBugCheckEx",
        "IoCreateFile",
        "IoCreateDevice",
        "IoDeleteDevice",
        "IoGetCurrentProcess",
        "IoRegisterBootDriverReinitialization",
        "IoAllocateAdapterChannel",
        "IoAttachDeviceByPointer",
        "RtlCompareMemory",
        "RtlImageNtHeader",
        "RtlImageRvaToVa",
        "RtlImageDirectoryEntryToData",
        "ZwQueryInformationToken",
        "ZwEnumerateKey",
        "ZwFlushKey",
        "ZwOpenProcess",
        "ZwOpenProcessToken",
        "ZwOpenProcess",
        "ZwWriteFile",
        "ZwDeleteFile",
    },
    "user32.dll": {
        "ChangeDisplaySettings",
        "ChangeDisplaySettingsEx",
        "VkKeyScanEx",
        "MapVirtualKeyEx",
        "GetLastInputInfo",
        "SystemParametersInfo",
        "SetClipboardViewer",
        "WCSToMBEx",
        "MBToWCSEx",
        "KillSystemTimer",
        "SetWindowStationUser",
        "GetReasonTitleFromReasonCode",
        "ReasonCodeNeedsBugID",
        "RecordShutdownReason",
        "GetTaskmanWindow",
        "RegisterTasklist",
        "RegisterSystemThread",
        "SetShellWindowEx",
        "GetProgmanWindow",
        "UnlockWindowStation",
        "GetWinStationInfo",
        "GetAppCompatFlags",
        "GetAppCompatFlags2",
        "ClientThreadSetup",
        "AllowForegroundActivation",
        "GetInternalWindowPos",
        "LockWindowStation",
        "QuerySendMessage",
        "OemKeyScan",
        "mouse_event",
        "AllowSetForegroundWindow",
        "GetAncestor",
        "GetWindowModuleFileName",
        "GetClassLong",
        "GetGuiResources",
        "GetRegisteredRawInputDevices",
        "OpenWindowStation",
        "DeregisterShellHookWindow",
        "SetWinEventHook",
        "SetWindowsHook",
        "SetWindowsHookEx",
        "RegisterRawInputDevices",
        "GetRawInputData",
        "NotifyWinEvent",
        "CopyImage",
        "CallMsgFilter",
        "CallNextHookEx",
        "DdeGetLastError",
        "DdeFreeStringHandle",
        "DdeQueryString",
        "DdeCreateStringHandle",
        "DdeCreateDataHandle",
        "DdePostAdvise",
        "DdeGetData",
        "DdeFreeDataHandle",
        "DdeClientTransaction",
        "DdeDisconnect",
        "DdeConnect",
        "DdeNameService",
        "DdeUninitialize",
        "DdeInitialize",
        "DdeQueryNextServer",
        "EnumDisplayDevices",
        "EnumDisplayMonitors",
        "ExitWindowsEx",
        "RegisterDeviceNotification",
        "RegisterUserApiHook",
        "RegisterShellHookWindow",
        "SetWindowLong",
        "SetForegroundWindow",
        "SetDebugErrorLevel",
        "SwapMouseButton",
        "SetWindowsHookW",
        "SetWindowsHookEx",
        "UnhookWinEvent",
        "UnhookWindowsHook",
        "UnhookWindowsHookEx",
        "UnregisterUserApiHook",
        "UnregisterDeviceNotification",
        "UnregisterPowerSettingNotification",
        "UnregisterMessagePumpHook",
        "VkKeyScan",
    },
    "credui.dll": {
        "CredUnPackAuthenticationBuffer",
        "CredUIPromptForCredentials",
        "CredUICmdLinePromptForCredentials",
    },
    "gina": {
        "WlxActivateUserShell",
        "WlxDisconnectNotify",
        "WlxDisplayLockedNotice",
        "WlxDisplaySASNotice",
        "WlxDisplayStatusMessage",
        "WlxGetConsoleSwitchCredentials",
        "WlxGetStatusMessage",
        "WlxInitialize",
        "WlxIsLockOk",
        "WlxIsLogoffOk",
        "WlxLoggedOnSAS",
        "WlxLoggedOutSAS",
        "WlxLogoff",
        "WlxNegotiate",
        "WlxNetworkProviderLoad",
        "WlxReconnectNotify",
        "WlxRemoveStatusMessage",
        "WlxScreenSaverNotify",
        "WlxShutdown",
        "WlxStartApplication",
        "WlxWkstaLockedSAS",
    },
    "version.dll": {
        "GetFileVersionInfoSize",
        "GetFileVersionInfo",
        "VerInstallFile",
    },
    "msvcrt.dll": {
        "_invoke_watson",
        "_crt_debugger_hook",
        "getenv",
        "_wgetenv",
        "_wexecve",
        "_execve",
        "_execlpe",
        "srand",
        "rand",
    },
    "msasn1.dll": {
        "ASN1BERDecNull",
        "ASN1BERDecEoid",
        "ASN1BERDecBool",
        "ASN1BERDecCheck",
        "ASN1BERDecCharString",
    },
    "ntshrui.dll": {
        "GetNetResourceFromLocalPath",
        "CanShareFolderW",
    },
    "imagehlp.dll": {
        "UpdateDebugInfoFileEx",
        "CheckSumMappedFile",
        "EnumerateLoadedModulesW64",
        "ImageNtHeader",
        "ImageRvaToVa",
        "StackWalk64",
        "SymCleanup",
        "SymFromAddr",
        "SymFunctionTableAccess64",
        "SymGetModuleInfo64",
        "SymGetModuleBase64",
        "SymGetModuleInfoW64",
        "SymGetOptions",
        "SymGetSymFromName",
        "SymInitialize",
        "SymLoadModule64",
        "SymRegisterCallback64",
        "SymSetOptions",
        "SymUnloadModule64",
        "SymAddSourceStream",
        "SymEnumSourceFileTokens",
        "SymEnumSourceFiles",
        "SymGetSourceFileFromToken",
        "SymGetSourceFileToken",
        "SymGetSourceVarFromToken",
        "SymMatchString",
        "SymRegisterCallbackW64",
        "SymSetHomeDirectory",
        "SymSrvGetFileIndexes",
        "RemoveRelocations",
        "BindImage",
        "BindImageEx",
        "CheckSumMappedFile",
        "EnumerateLoadedModules64",
        "EnumerateLoadedModules",
        "EnumerateLoadedModulesEx",
        "FindDebugInfoFile",
        "FindDebugInfoFileEx",
        "FindExecutableImage",
        "FindExecutableImageEx",
        "FindFileInPath",
        "FindFileInSearchPath",
        "GetImageConfigInformation",
        "GetImageUnusedHeaderBytes",
        "GetTimestampForLoadedLibrary",
        "ImageAddCertificate",
        "ImageDirectoryEntryToData",
        "ImageDirectoryEntryToDataEx",
        "ImageEnumerateCertificates",
        "ImageGetCertificateData",
        "ImageGetCertificateHeader",
        "ImageGetDigestStream",
        "ImageLoad",
        "ImageRemoveCertificate",
        "ImageRvaToSection",
        "ImageUnload",
        "ImagehlpApiVersion",
        "ImagehlpApiVersionEx",
        "MakeSureDirectoryPathExists",
        "MapAndLoad",
        "MapDebugInformation",
        "MapFileAndCheckSum",
        "ReBaseImage64",
        "ReBaseImage",
        "RemovePrivateCvSymbolic",
        "RemovePrivateCvSymbolicEx",
        "SearchTreeForFile",
        "SetImageConfigInformation",
        "SplitSymbols",
        "StackWalk",
        "SymEnumSym",
        "TouchFileTimes",
        "UnDecorateSymbolName",
        "UnMapAndLoad",
        "UnmapDebugInformation",
        "UpdateDebugInfoFile",
    },
    "wsnmp32.dll": {
        "SnmpGetTranslateMode",
        "SnmpSetTranslateMode",
        "SnmpGetRetransmitMode",
        "SnmpSetRetransmitMode",
        "SnmpGetTimeout",
        "SnmpSetTimeout",
        "SnmpGetRetry",
        "SnmpSetRetry",
        "SnmpConveyAgentAddress",
        "SnmpSetAgentAddress",
        "SnmpGetVendorInfo",
        "SnmpStartup",
        "SnmpCleanup",
        "SnmpOpen",
        "SnmpClose",
        "SnmpSendMsg",
        "SnmpRecvMsg",
        "SnmpRegister",
    },
    "crypt32.dll": {
        "PFXImportCertStore",
        "PFXExportCertStoreEx",
        "PFXIsPFXBlob",
        "CryptProtectMemory",
        "PFXVerifyPassword",
        "CryptDecodeObject",
        "CryptDecodeObjectEx",
        "CryptBinaryToString",
        "CryptStringToBinary",
        "CryptAcquireCertificatePrivateKey",
        "CryptUnprotectData",
        "CryptEnumOIDInfo",
        "CryptMsgGetParam",
        "CryptUnprotectMemory",
        "CertVerifyTimeValidity",
        "CertVerifySubjectCertificateContext",
        "CertVerifyRevocation",
        "CertVerifyCertificateChainPolicy",
        "CertVerifyCTLUsage",
        "CertVerifyCRLTimeValidity",
        "CertVerifyCRLRevocation",
        "CertUnregisterSystemStore",
        "CertUnregisterPhysicalStore",
        "CertStrToName",
        "CertSetStoreProperty",
        "CertSetEnhancedKeyUsage",
        "CertSetCertificateContextProperty",
        "CertSetCertificateContextPropertiesFromCTLEntry",
        "CertSetCTLContextProperty",
        "CertSetCRLContextProperty",
        "CertSerializeCertificateStoreElement",
        "CertSerializeCTLStoreElement",
        "CertSerializeCRLStoreElement",
        "CertSelectCertificateChains",
        "CertSaveStore",
        "CertRetrieveLogoOrBiometricInfo",
        "CertResyncCertificateChainEngine",
        "CertRemoveStoreFromCollection",
        "CertRemoveEnhancedKeyUsageIdentifier",
        "CertRegisterSystemStore",
        "CertRegisterPhysicalStore",
        "CertRDNValueToStr",
        "CertOpenSystemStore",
        "CertOpenStore",
        "CertOpenServerOcspResponse",
        "CertOIDToAlgId",
        "CertNameToStr",
        "CertIsValidCRLForCertificate",
        "CertIsRDNAttrsInCertificateName",
        "CertGetValidUsages",
        "CertGetSubjectCertificateFromStore",
        "CertGetStoreProperty",
        "CertGetServerOcspResponseContext",
        "CertGetPublicKeyLength",
        "CertGetNameString",
        "CertGetIssuerCertificateFromStore",
        "CertGetIntendedKeyUsage",
        "CertGetEnhancedKeyUsage",
        "CertGetCertificateContextProperty",
        "CertGetCertificateChain",
        "CertGetCTLContextProperty",
        "CertGetCRLFromStore",
        "CertGetCRLContextProperty",
        "CertFreeServerOcspResponseContext",
        "CertFreeCertificateContext",
        "CertFreeCertificateChainList",
        "CertFreeCertificateChainEngine",
        "CertFreeCertificateChain",
        "CertFreeCTLContext",
        "CertFreeCRLContext",
        "CertFindSubjectInSortedCTL",
        "CertFindSubjectInCTL",
        "CertFindRDNAttr",
        "CertFindExtension",
        "CertFindChainInStore",
        "CertFindCertificateInStore",
        "CertFindCertificateInCRL",
        "CertFindCTLInStore",
        "CertFindCRLInStore",
        "CertFindAttribute",
        "CertEnumSystemStoreLocation",
        "CertEnumSystemStore",
        "CertEnumSubjectInSortedCTL",
        "CertEnumPhysicalStore",
        "CertEnumCertificatesInStore",
        "CertEnumCertificateContextProperties",
        "CertEnumCTLsInStore",
        "CertEnumCTLContextProperties",
        "CertEnumCRLsInStore",
        "CertEnumCRLContextProperties",
        "CertDuplicateStore",
        "CertDuplicateCertificateContext",
        "CertDuplicateCertificateChain",
        "CertDuplicateCTLContext",
        "CertDuplicateCRLContext",
        "CertDeleteCertificateFromStore",
        "CertDeleteCTLFromStore",
        "CertDeleteCRLFromStore",
        "CertCreateSelfSignCertificate",
        "CertCreateContext",
        "CertCreateCertificateContext",
        "CertCreateCertificateChainEngine",
        "CertCreateCTLEntryFromCertificateContextProperties",
        "CertCreateCTLContext",
        "CertCreateCRLContext",
        "CertControlStore",
        "CertComparePublicKeyInfo",
        "CertCompareIntegerBlob",
        "CertCompareCertificateName",
        "CertCompareCertificate",
        "CertCloseStore",
        "CertCloseServerOcspResponse",
        "CertAlgIdToOID",
        "CertAddStoreToCollection",
        "CertAddSerializedElementToStore",
        "CertAddRefServerOcspResponseContext",
        "CertAddRefServerOcspResponse",
        "CertAddEnhancedKeyUsageIdentifier",
        "CertAddEncodedCertificateToSystemStore",
        "CertAddEncodedCertificateToStore",
        "CertAddEncodedCTLToStore",
        "CertAddEncodedCRLToStore",
        "CertAddCertificateLinkToStore",
        "CertAddCertificateContextToStore",
        "CertAddCTLLinkToStore",
        "CertAddCTLContextToStore",
        "CertAddCRLLinkToStore",
        "CertAddCRLContextToStore",
    },
    "cryptdll.dll": {
        "MD5Init",
        "MD5Update",
        "MD5Final",
    },
    "usp10.dll": {
        "ScriptBreak",
        "ScriptStringOut",
        "ScriptStringAnalyse",
        "ScriptLayout",
        "ScriptItemize",
        "ScriptShape",
        "ScriptFreeCache",
        "ScriptPlace",
    },
    "mscoree.dll": {
        "CLRCreateInstance",
        "CorBindToRuntime",
        "CorBindToRuntimeEx",
    },
    "iphlpapi.dll": {
        "Icmp6CreateFile",
        "Icmp6ParseReplies",
        "Icmp6SendEcho2",
        "IcmpCloseHandle",
        "IcmpCreateFile",
        "IcmpSendEcho",
        "IcmpSendEcho2",
        "IcmpSendEcho2Ex",
        "IcmpParseReplies",
        "CreateIpNetEntry",
        "DeleteIpAddress",
        "DeleteIpNetEntry",
        "DeleteIpNetEntry2",
        "DeleteIpForwardEntry",
        "DeleteIpForwardEntry2",
        "GetNetworkParams",
        "GetAdaptersAddresses",
        "GetTcpTable",
        "GetBestRoute",
        "GetIfTable",
        "GetTcpStatistics",
        "GetTcpStatisticsEx",
        "GetIpAddrTable",
        "GetAdapterIndex",
        "GetIpStatistics",
        "GetIfEntry",
        "GetIcmpStatistics",
        "GetUdpTable",
        "SetIpNetEntry",
        "SetIpTTL",
        "SendARP",
        "InternalSetIpStats",
        "SetIpForwardEntry",
        "InternalSetIpForwardEntry",
        "AddIPAddress",
        "FlushIpNetTable",
        "GetIpNetTable",
        "SetAdapterIpAddress",
        "NhpAllocateAndGetInterfaceInfoFromStack",
        "NhGetGuidFromInterfaceName",
        "InternalGetUdpTable",
        "UnenableRouter",
        "register_icmp",
        "_PfUnBindInterface@4",
        "_PfDeleteInterface@4",
        "_PfCreateInterface@24",
        "_PfAddFiltersToInterface@24",
    },
    "dbghelp.dll": {
        "EnumDirTree",
        "SymFromAddr",
        "SymGetModuleBase64",
        "SymFunctionTableAccess64",
        "SymCleanup",
        "StackWalk64",
        "SymInitialize",
        "SymFunctionTableAccess64",
        "SymGetModuleBase64",
        "StackWalk64",
        "ImageNtHeader",
        "SymUnloadModule64",
        "SymLoadModule64",
        "SymLoadModuleEx",
        "SymGetOptions",
        "SymSetOptions",
        "MiniDumpWriteDump",
        "SymGetSymFromName",
        "SymFromAddr",
        "SymCleanup",
        "SymGetModuleInfoW64",
        "SymRegisterCallback64",
        "EnumerateLoadedModules",
        "EnumerateLoadedModulesW64",
        "SymInitialize",
        "ImageDirectoryEntryToData",
        "SymEnumSym",
        "SymEnumerateSymbolsW",
    },
    "pstorec.dll": {
        "PStoreCreateInstance",
        "PStoreEnumProviders",
    },
    "atl.dll": {
        "AtlMarshalPtrInProc",
        "AtlAxCreateDialog",
        "AtlAxCreateControl",
        "AtlAxAttachControl",
        "AtlAxCreateControlEx",
        "AtlAxWinInit",
        "AtlAxGetHost",
        "AtlAxCreateControlLic",
        "AtlAxCreateControlLicEx",
        "AtlAxGetControl",
        "AtlAxWinTerm",
    },
    "oleaut32.dll": {
        "GetActiveObject",
        "DispCallFunc",
        "CreateTypeLib",
        "LoadTypeLib",
        "LoadRegTypeLib",
        "RegisterTypeLib",
        "VarXor",
        "LoadTypeLibEx",
        "UnRegisterTypeLib",
    },
    "dnsapi.dll": {
        "DnsAcquireContextHandle",
        "DnsCancelQuery",
        "DnsExtractRecordsFromMessage",
        "DnsFree",
        "DnsFreeProxyName",
        "DnsGetProxyInformation",
        "DnsModifyRecordsInSet",
        "DnsNameCompare",
        "DnsQuery_",
        "DnsQueryConfig",
        "DnsQueryEx",
        "DnsRecordCompare",
        "DnsRecordCopyEx",
        "DnsRecordListFree",
        "DnsRecordSetCompare",
        "DnsRecordSetCopyEx",
        "DnsRecordSetDetach",
        "DnsReleaseContextHandle",
        "DnsReplaceRecordSet",
        "DnsValidateName",
        "DnsValidateServerStatus",
        "DnsWriteQuestionToBuffer",
    },
    "avicap32.dll": {
        "capControlCallback",
        "capCreateCaptureWindow",
        "capErrorCallback",
        "capGetDriverDescription",
        "capStatusCallback",
        "capVideoStreamCallback",
        "capWaveStreamCallback",
        "capYieldCallback",
    },
    "odbctrac.dll": {
        "TraceReturn",
        "TraceVersion",
        "TraceSQLConnect",
        "TraceSQLCancel",
    },
    "samsrv.dll": {
        "SamQueryInformationUse",
        "SamIConnect",
        "SamIFree_SAMPR_ENUMERATION_BUFFER",
        "SamIFree_SAMPR_USER_INFO_BUFFER",
        "SamIGetPrivateData",
        "SamrCloseHandle",
        "SamrEnumerateUsersInDomain",
        "SamrOpenDomain",
        "SamrOpenUser",
        "SamrQueryInformationUser",
    },
    "Au3Zip.dll": {
        "AU3_GetPluginDetails",
        "WinDetectHiddenText",
        "WinSearchChildren",
        "WinTextMatchMode",
        "WinTitleMatchMode",
        "WinWaitDelay",
        "FileRecycle",
        "GUICtrlSendMsg",
        "GUICtrlSendToDummy",
        "GUICtrlSetBkColor",
        "GUICtrlSetColor",
        "GUICtrlSetCursor",
        "GUICtrlSetData",
        "Send",
        "SendKeyDelay",
        "SendKeyDownDelay",
        "SendKeepActive",
        "SendCommandID",
        "SendAttachMode",
        "SendCapslockMode",
        "ControlSend",
        "UDPSend",
        "_FTP_Command",
        "_INetSmtpMail",
        "_viExecCommand",
        "_WinAPI_BroadcastSystemMessage",
        "_WinAPI_SendMessageTimeout",
    },
    "mfc42.dll": {
        "CFile::CreateControl",
        "CException::Delete",
        "CDaoQueryDef::Execute",
        "CDaoDatabase::GetConnect",
        "CDatabase::GetConnectInfo",
        "CGopherFileFind::GetLastWriteTime",
        "COleControl::OnCreate",
        "CSocket::ProcessAuxQueue",
        "CWinThread::ProcessWndProcException",
    },
}

SUSPICIOUS_MODULES = [
    "msxfs.dll",
    "xfs_conf.dll",
    "metsrv.dll",
    "bootvid.dll",
    "dsauth.dll",
    "mscat32.dll",
    "ieframe.dll",
    "mtxoci.dll",
    "msoert2.dll",
    "lz32.dll",
    "iassam.dll",
    "wlanui.dll",
    "avifil32.dll",
    "regapi.dll",
    "msgina.dll",
    "msdart.dll",
    "sqlunirl.dll",
    "adsldpc.dll",
    "mprddm.dll",
    "mprddm.dll",
    "wpcap.dll",
    "snmpapi.dll",
    "acledit.dll",
    "dciman32.dll",
    "msoeacct.dll",
    "dhcpsapi.dll",
    "azroles.dll",
    "guard32.dll",
    "hotplug.dll",
    "itss.dll",
    "rdpclip.exe",
    "perfctrs.dll",
    "msports.dll",
    "sqlwoa.dll",
    "cdosys.dll",
    "resutils.dll",
    "eappprxy.dll",
    "urlredir.dll",
    "shimeng.dll",
    "apphelp.dll",
    "schannel.dll",
    "firewallapi.dll",
    "clusapi.dll",
    "advpack.dll",
    "clfsw32.dll",
    "avrt.dll",
    "gpedit.dll",
    "iisutil.dll",
    "winrnr.dll",
    "oleacc.dll",
    "nsi.dll",
    "vssapi.dll",
    "dxva2.dll",
    "msdrm.dll",
    "srcore.dll",
    "spp.dll",
    "ndfapi.dll",
    "netutils.dll",
    "slc.dll",
    "rastls.dll",
    "detoured.dll",
    "colbact.dll",
    "nvcuda.dll",
    "zlib1.dll",
    "Update.dll",
    "sbiedll.dll",
    "Spoon-Plugin.dll",
    "Au3Zipc.dll",
    "dwmapi.dll",
    "msident.dll",
    "cfgmgr32.dll",
    "adsldp.dll",
    "sfc_os.dll",
    "rpchttp.dll",
    "hid.dll",
    "rasman.dll",
    "msdtcprx.dll",
    "console.dll",
    "msrating.dll",
    "firefox.exe",
    "vmtoolsd.exe",
    "chrome.exe",
    "mshta.exe",
    "logger.exe",
    "dumprep.exe",
    "vmsrvc.exe",
    "vmusrvc.exe",
    "VBoxService.exe",
    "VBoxTray.exe",
    "regedt32.exe",
    "pagefile.exe",
    "outlook.exe",
    "packed.exe",
    "svchostdll.exe",
    "iptools.exe",
    "chrome.exe",
    "client.exe",
    "desktop.exe",
    "adobeflash.exe",
    "win-firewall.exe",
    "winsys32.sys",
    "dwm.exe",
    "msnmsgr.exe",
    "opera.exe",
    "navigator.exe",
    "netscape.exe",
    "mozilla.exe",
    "pidgin.exe",
    "java.exe",
    "jucheck.exe",
    "SkypePM.exe",
    "seamonkey.exe",
    "thunderbird.exe",
    "devenv.exe",
    "steam.exe",
    "wininit.exe",
    "stub32.exe",
    "wmiprvse.exe",
    "ulib.dll",
    "osuninst.dll",
    "ifsutil.dll",
    "logonui.exe",
    "spoolsv.exe",
    "alg.exe",
    "recycled.exe",
    "iprip.exe",
    "Updater.exe",
    "Binder.exe",
    "rsh.exe",
    "rexec.exe",
    "ncpa.cpl",
    "hhctrl.ocx",
    "mso.dll",
    "fltMgr.sys",
    "cmpbk32.dll",
    "qutil.dll",
    "upnphost.dll",
    "hlink.dll",
    "inseng.dll",
    "winupd.exe",
    "scrrun.dll",
    "wwlib.dll",
    "ppcore.dll",
    "rtm.dll",
    "cryptdlg.dll",
    "authz.dll",
    "cygcrypto-1.0.0.dll",
    "ncrypt.dll",
    "wdigest.dll",
    "rsaenh.dll",
    "System.Security.Cryptography",
    "certcli.dll",
    "bcrypt.dll",
    "dbnmpntw.dll",
    "activeds.dll",
    "samlib.dll",
    "wlanapi.dll",
    "wab32.dll",
    "drprov.dll",
    "packet.dll",
    "mshtml.dll",
    "cmdial32.dll",
    "esent.dll",
    "odbc32.dll",
    "winshfhc.dll",
    "netplwiz.dll",
    "shimgvw.dll",
    "xmllite.dll",
    "wldap32.dll",
    "scarddlg.dll",
    "sisbkup.dll",
    "mswsock.dll",
    "wintrust.dll",
    "lsasrv.dll",
    "query.dll",
    "security.dll",
    "rastapi.dll",
    "msutb.dll",
    "pdh.dll",
    "odbccp32.dll",
    "devmgr.dll",
    "mssign32.dll",
    "cscapi.dll",
    "urlmon.dll",
    "Userenv.dll",
    "sensapi.dll",
    "usbd.sys",
    "scecli.dll",
    "ws2_32.dll",
    "wsock32.dll",
    "winmm.dll",
    "wship6.dll",
    "Loadperf.dll.dll",
    "clbcatq.dll",
    "icmp.dll",
    "wtsapi32.dll",
    "fveapi.dll",
    "winscard.dll",
    "netapi32.dll",
    "cryptbase.dll",
    "winsta.dll",
    "mprapi.dll",
    "sfc.dll",
    "secur32.dll",
    "mpr.dll",
    "winhttp.dll",
    "apphelp.dll",
    "ntdsapi.dll",
    "shfolder.dll",
    "nddeapi.dll",
    "psapi.dll",
    "fwpuclnt.dll",
    "mapi32.dll",
    "wininet.dll",
    "rpcrt4.dll",
    "setupapi.dll",
    "powrprof.dll",
    "credui.dll",
    "gina",
    "mspdb80.dll",
    "ntshrui.dll",
    "dhcpcsvc.dll",
    "imagehlp.dll",
    "wsnmp32.dll",
    "crypt32.dll",
    "cryptdll.dll",
    "msvfw32.dll",
    "msi.dll",
    "usp10.dll",
    "iphlpapi.dll",
    "dbghelp.dll",
    "vaultsvc.dll",
    "vaultcli.dll",
    "pstorec.dll",
    "dnsapi.dll",
    "odbctrac.dll",
    "samsrv.dll",
    "cabinet.dll",
    "rpcns4.dll",
    "Au3Zip.dll",
]

# https://www.mandiant.com/resources/blog/tracking-malware-import-hashing
SUSPICIOUS_IMPHASHES = [
    "2c26ec4a570a502ed3e8484295581989",  # GREENCAT
    "b722c33458882a1ab65a13e99efe357e",  # GREENCAT
    "2d24325daea16e770eb82fa6774d70f1",  # GREENCAT
    "0d72b49ed68430225595cc1efb43ced9",  # GREENCAT
    "959711e93a68941639fd8b7fba3ca28f",  # STARSYPOUND
    "4cec0085b43f40b4743dc218c585f2ec",  # COOKIEBAG
    "3b10d6b16f135c366fc8e88cba49bc6c",  # NEWSREELS
    "4f0aca83dfe82b02bbecce448ce8be00",  # NEWSREELS
    "ee22b62aa3a63b7c17316d219d555891",  # TABMSGSQL
    "a1a42f57ff30983efda08b68fedd3cfc",  # WEBC2
    "7276a74b59de5761801b35c672c9ccb4",  # WEBC2
]

# https://github.com/avast/retdec/blob/071852bbc9619342ce2409ce3241124526a3f0a0/src/fileformat/file_format/pe/pe_format.cpp#L243
# http://www.hexacorn.com/blog/2016/12/15/pe-section-names-re-visited/
WHITELIST_SECTION_NAMES = [
    ".00cfg",  # Control Flow Guard (CFG) section (added by newer versions of Visual Studio)
    ".AAWEBS",  # section used by Amiti Antivirus DLLs webspam.dll and webspamwow64.dll
    ".apiset",  # a section present inside the apisetschema.dll
    ".arch",  # Alpha-architecture section
    ".autoload_text",  # cygwin/gcc; the Cygwin DLL uses a section to avoid copying certain data on fork.
    ".bindat",  # Binary data (also used by one of the downware installers based on LUA)
    ".bootdat",  # section that can be found inside Visual Studio files; contains palette entries
    ".bss",  # Uninitialized Data Section
    ".BSS",  # Uninitialized Data Section
    ".buildid",  # gcc/cygwin; Contains debug information (if overlaps with debug directory)
    ".CLR_UEF",  # .CLR Unhandled Exception Handler section; see https://github.com/dotnet/coreclr/blob/master/src/vm/excep.h
    ".code",  # Code Section
    ".cormeta",  # .CLR Metadata Section
    ".complua",  # Binary data, most likely compiled LUA (also used by one of the downware installers based on LUA)
    ".CRT",  # Initialized Data Section  (C RunTime)
    ".cygwin_dll_common",  # cygwin section containing flags representing Cygwin’s capabilities; refer to cygwin.sc and wincap.cc inside Cygwin run-time
    ".data",  # Data Section
    ".DATA",  # Data Section
    ".data1",  # Data Section
    ".data2",  # Data Section
    ".data3",  # Data Section
    ".debug",  # Debug info Section
    ".debug$F",  # Debug info Section (Visual C++ version <7.0)
    ".debug$P",  # Debug info Section (Visual C++ debug information",  # precompiled information
    ".debug$S",  # Debug info Section (Visual C++ debug information",  # symbolic information)
    ".debug$T",  # Debug info Section (Visual C++ debug information",  # type information)
    ".drectve ",  # directive section (temporary, linker removes it after processing it; should not appear in a final PE image)
    ".didat",  # Delay Import Section
    ".didata",  # Delay Import Section
    ".edata",  # Export Data Section
    ".eh_fram",  # gcc/cygwin; Exception Handler Frame section
    ".export",  # Alternative Export Data Section
    ".fasm",  # FASM flat Section
    ".flat",  # FASM flat Section
    ".gfids",  # section added by new Visual Studio (14.0); purpose unknown
    ".giats",  # section added by new Visual Studio (14.0); purpose unknown
    ".gljmp",  # section added by new Visual Studio (14.0); purpose unknown
    ".glue_7t",  # ARMv7 core glue functions (thumb mode)
    ".glue_7",  # ARMv7 core glue functions (32-bit ARM mode)
    ".idata",  # Initialized Data Section  (Borland)
    ".idlsym",  # IDL Attributes (registered SEH)
    ".impdata",  # Alternative Import data section
    ".import",  # Alternative Import data section
    ".itext",  # Code Section  (Borland)
    ".ndata",  # Nullsoft Installer section
    ".orpc",  # Code section inside rpcrt4.dll
    ".pdata",  # Exception Handling Functions Section (PDATA records)
    ".rdata",  # Read-only initialized Data Section  (MS and Borland)
    ".reloc",  # Relocations Section
    ".rodata",  # Read-only Data Section
    ".rsrc",  # Resource section
    ".sbss",  # GP-relative Uninitialized Data Section
    ".script",  # Section containing script
    ".shared",  # Shared section
    ".sdata",  # GP-relative Initialized Data Section
    ".srdata",  # GP-relative Read-only Data Section
    ".stab",  # Created by Haskell compiler (GHC)
    ".stabstr",  # Created by Haskell compiler (GHC)
    ".sxdata",  # Registered Exception Handlers Section
    ".text",  # Code Section
    ".text0",  # Alternative Code Section
    ".text1",  # Alternative Code Section
    ".text2",  # Alternative Code Section
    ".text3",  # Alternative Code Section
    ".textbss",  # Section used by incremental linking
    ".tls",  # Thread Local Storage Section
    ".tls$",  # Thread Local Storage Section
    ".udata",  # Uninitialized Data Section
    ".vsdata",  # GP-relative Initialized Data
    ".xdata",  # Exception Information Section
    ".wixburn",  # Wix section; see https://github.com/wixtoolset/wix3/blob/develop/src/burn/stub/StubSection.cpp
    ".wpp_sf ",  # section that is most likely related to WPP (Windows software trace PreProcessor); not sure how it is used though; the code inside the section is just a bunch of routines that call FastWppTraceMessage that in turn calls EtwTraceMessage
    "BSS",  # Uninitialized Data Section  (Borland)
    "CODE",  # Code Section (Borland)
    "DATA",  # Data Section (Borland)
    "DGROUP",  # Legacy data group section
    "edata",  # Export Data Section
    "idata",  # Initialized Data Section  (C RunTime)
    "INIT",  # INIT section (drivers)
    "minATL",  # Section that can be found inside some ARM PE files; purpose unknown; .exe files on Windows 10 also include this section as well; its purpose is unknown, but it contains references to ___pobjectentryfirst,___pobjectentrymid,___pobjectentrylast pointers used by Microsoft::WRL::Details::ModuleBase::… methods described e.g. here, and also referenced by .pdb symbols; so, looks like it is being used internally by Windows Runtime C++ Template Library (WRL) which is a successor of Active Template Library (ATL); further research needed
    "PAGE",  # PAGE section (drivers)
    "rdata",  # Read-only Data Section
    "sdata",  # Initialized Data Section
    "shared",  # Shared section
    "Shared",  # Shared section
    "testdata",  # section containing test data (can be found inside Visual Studio files)
    "text",  # Alternative Code Section
    # 2020-08-15
    ".imrsiv",
    # https://www.hexacorn.com/blog/2019/07/26/pe-section-names-re-visited-again/
    "RT_CODE",
    "RT_DATA",
    "RT_CONST",
    "RT_BSS",
    # OpenCV
    "IPPCODE",
    "IPPDATA",
    # HP sections
    "TulipLog",
    # NVidia
    "_NVTEXT3",
    # "obvious ones"
    ".SHAREDS",
    "_LTEXT",
    "_LDATA",
    "COMPRESS",
    "FlashPix",
    "NONPAGED",
    "INITCONS",
    "COMMONDA",
    "PRIVATE",
    "ApiHooks",
    # PAGE* sections
    "PAGECONS",
    "PAGEDATA",
    "PAGE_COM",
    "PAGE_INI",
    "PAGEDC11",
    "PAGE_DDC",
    "PAGEDC80",
    "PAGEDFER",
    "PAGECFER",
    "PAGE_CAI",
    "PAGE_ISR",
    "PAGEDC60",
    "PAGEDC10",
    "PAGESER",
    "PAGEDC50",
    "PAGEDC40",
    "PAGEcKPL",
    "PAGEcFRM",
    "PAGE_DAL",
    "PAGEcRMA",
    "PAGEcRM",
    "PAGE_MCM",
    "PAGEdMXL",
    "PAGEdKPL",
    "PAGEdFRM",
    "PAGEcMXL",
    "PAGE_RW",
    "PAGE_RO",
    "PAGE_CPR",
    "PAGE_CPC",
    "PAGE_PPL",
    "PAGEDTES",
    "PAGEDNLG",
    "PAGECTES",
    "PAGECNLG",
    "NON_PAGE",
    "PAGESRP0",
    "PAGEdreg",
    "PAGEdjaw",
    "PAGEcsrv",
    "PAGEcjaw",
    "PAGEcsec",
    "PAGEcTSL",
    "PAGEdctw",
    "PAGEcctw",
    "PAGEcwfd",
    "PAGEcpsm",
    "PAGEcnlo",
    "PAGEcast",
    "PAGELK",
    "PAGEdsv_",
    "PAGEdcln",
    "PAGEcsv_",
    "PAGEccln",
    "PAGE_DEV",
    "PAGEdStn",
    "PAGE_IVI",
    "PAGE_ISI",
    "PAGE_IKV",
    "PAGE_IIL",
    "PAGE_ICZ",
    "PAGE_ICI",
    "PAGEdscn",
    "PAGEdimg",
    "PAGEdSnF",
    "PAGEcimg",
    "PAGEDC12",
    "PAGE_ITN",
    "PAGE_ILN",
    "PAGE_IEG",
    "PAGE_IBT",
    "PAGEdoid",
    "PAGEDC41",
    "PAGE_WSV",
    "PAGEdwi2",
    "PAGEdwi1",
    "PAGE_CRM",
    "PAGEdPSL",
    "PAGEcPSL",
    "PAGEdPsr",
    "PAGErPSL",
    "PAGErMXL",
    "PAGErKPL",
    "PAGErFRM",
    "PAGEdTSL",
    "PAGE_PWR",
    "PAGE_TOP",
    "PAGE_PMC",
    "PAGE_MEM",
    "PAGE_DBG",
    "PAGED",
    "PAGE_OSS",
    "PAGECODE",
    "PAGEDLEG",
    "PAGECLEG",
    "PAGEcwkp",
    "PAGEcptw",
    "PAGE_LK",
    "PAGE_IGN",
    "PAGEdSnd",
    "PAGE_DAT",
    "PAGEdWsP",
    "PAGEdrlg",
    "PAGEKD",
    "PAGE_IRV",
    "PAGEipp",
    "PAGEABLE",
    "PAGEdtyl",
    "PAGEdpma",
    "PAGEdkmr",
    "PAGEdcpk",
    "PAGEctyl",
    "PAGEcpma",
    "PAGEckmr",
    "PAGEccpk",
    "PAGED_DA",
    "PAGEcLGC",
    "PAGEI028",
    "PAGEI027",
    "PAGEI026",
    "PAGEI025",
    "PAGEI024",
    "PAGEI023",
    "PAGEI022",
    "PAGEI021",
    "PAGEI020",
    "PAGEI019",
    "PAGEI018",
    "PAGEI017",
    "PAGEI016",
    "PAGEI015",
    "PAGEI014",
    "PAGEI013",
    "PAGEI012",
    "PAGEI011",
    "PAGEI010",
    "PAGEI009",
    "PAGEI008",
    "PAGEI007",
    "PAGEI006",
    "PAGEI005",
    "PAGEI004",
    "PAGEI003",
    "PAGEI002",
    "PAGEI001",
    "PAGEI000",
    "PAGE_BIO",
    "PAGEVRFY",
    "PAGED_CO",
    "PAGEPARW",
    "PAGEVRFD",
    "PAGEVRFC",
    "PAGEHDLS",
    "PAGEWMI",
    "PAGESPEC",
    "PAGE_VCN",
    "PAGE_SMU",
    "PAGE_PSP",
    "PAGE_ISP",
    "PAGE_GVM",
    "PAGE_GC_",
    "PAGE_BGM",
    "PAGE0003",
    "PAGE0002",
    "PAGE0001",
    "PAGEdQua",
    "PAGESRP",
    "PAGESENM",
    "PAGE_NO_",
    "PageIVUE",
    "PAGErVLT",
    "PAGEdVLT",
    "PAGEccpt",
    "PAGEcVLT",
    "PAGELKCO",
    "PAGE_DF_",
    "PAGEdThP",
    "PAGE_VCE",
    "PAGE_UVD",
    "PAGEI029",
    "PAGECNST",
    "PAGELKD",
    "PAGEtext",
    "PAGErdat",
    "PAGEdata",
    "PAGE_IOM",
    "PAGEnPSL",
    "PAGEnMXL",
    "PAGEnKPL",
    "PAGEnFRM",
    "PAGE_DYN",
    "PAGEUSBS",
    "PAGEPOWR",
    "PAGEWdfV",
    "PAGEiVAC",
    "PAGESPR0",
    "PAGE_M",
    "PAGE_IOC",
    "PAGE_DIS",
    "PAGE_CX",
    "PAGEWCE1",
    "PAGEWCE0",
    "PAGEUBS0",
    "PAGEcrea",
    "PAGEDNLD",
    "PAGErGEN",
    "PAGEfull",
    "PAGESCAN",
    "PAGER32R",
    "PAGER32C",
    "PAGELK16",
    "PAGEBTTS",
    "NOPAGED",
    ".no_page",
    "nonpage",
    "PAGEopen",
    "PAGE_INV",
    "PAGE_ATA",
    "PAGE_AFP",
    "PAGEVRFB",
    "PAGEUSB",
    "PAGEUMDM",
    "PAGESAN",
    "PAGENDSW",
    "PAGENDST",
    "PAGENDSM",
    "PAGENDSI",
    "PAGENDSF",
    "PAGENDSE",
    "PAGENDSA",
    "PAGEMOUC",
    "PAGELOCK",
    "PAGEIPMc",
    "PAGEI042",
    "PAGEI041",
    "PAGEI040",
    "PAGEI039",
    "PAGEI038",
    "PAGEI037",
    "PAGEI036",
    "PAGEI035",
    "PAGEI034",
    "PAGEI033",
    "PAGEI032",
    "PAGEI031",
    "PAGEI030",
    "PAGEEAWR",
    "PAGEEADS",
    "PAGEC",
    "PAGEBGFX",
    "PAGEAFD",
    # last
    ".secure",
    ".DllShar",
    ".DllDebu",
    "HookShar",
    "DebugDat",
    "DebugCod",
    "DeathAnd",
    ".ELIOT",
    "EWTPHOOK",
    "FINDSHAR",
    ".Process",
    ".PwrMoni",
    ".remotep",
    ".remoteF",
    ".HOOKVAR",
    ".DLLShar",
    # 2020-10-15
    ".AAWEBS",
    # 2022-11-23
    ".profile",
    # m0ar
    ".rossym",
]

# https://www.hexacorn.com/blog/2016/12/15/pe-section-names-re-visited/
CYGWIN_SECTION_NAMES = [
    ".init",
    ".text",
    # ".text$* (basically, .text$<name>)",
    ".glue_7t",
    ".glue_7",
    ".fini",
    ".gcc_exc",
    ".gcc_except_table",
    ".autoload_text",
    ".data",
    ".data2",
    # ".data$* (basically, .data$<name>)",
    ".data_cygwin_nocopy",
    ".rdata",
    # ".rdata$* (basically, .rdata$<name>)",
    ".eh_frame",
    ".pdata",
    ".bss",
    "COMMON",
    ".edata",
    ".debug$S",
    ".debug$T",
    ".debug$F",
    ".drectve",
    ".idata",
    ".idata$2",
    ".idata$3",
    ".idata$4",
    ".idata$5",
    ".idata$6",
    ".idata$7",
    ".CRT",
    ".endjunk",
    ".cygwin_dll_common",
    ".rsrc",
    # ".rsrc$* (basically, .rsrc$<name>)",
    ".reloc",
    ".stab",
    ".stabstr",
    ".debug_aranges",
    ".debug_pubnames",
    ".debug_info",
    ".debug_abbrev",
    ".debug_line",
    ".debug_frame",
    ".debug_str",
    ".debug_loc",
    ".debug_macinfo",
    ".debug_ranges",
    ".cygheap",
]

LINUX_ELF_SECTION_NAMES = [
    ".btext",  # Big Endian .text section (code)
    ".bdata",  # Big Endian .data section (data)
    ".brdata",  # Big Endian .rdata section (Read-Only data)
    ".bctors",  # Big Endian .ctors section (constructors)
    ".bdtors",  # Big Endian .dtors section (destructors)
    ".rela.btext",  # Big Endian relocation section for .text
    ".rela.bdata",  # Big Endian relocation section for .data
    ".rela.brdata",  # Big Endian relocation section for .rdata
    ".rela.bctors",  # Big Endian relocation section for .ctors
    ".rela.bdtors",  # Big Endian relocation section for .dtors
    ".bbss",  # Big Endian section .bss (uninitialized data)
    ".ctors",  # Little Endian .ctors section (constructors)
    ".dtors",  # Little Endian .dtors section (destructors)
    ".ltext",  # Little Endian .text section (code)
    ".ldata",  # Little Endian .data section (data)
    ".lrdata",  # Little Endian .rdata section (Read-Only data)
    ".lctors",  # Little Endian .ctors section (constructors)
    ".ldtors",  # Little Endian .dtors section (destructors)
    ".rela.ltext",  # Little Endian relocation section for .text
    ".rela.ldata",  # Little Endian relocation section for .data
    ".rela.lrdata",  # Little Endian relocation section for .rdata
    ".rela.lctors",  # Little Endian relocation section for .ctors
    ".rela.ldtors",  # Little Endian relocation section for .dtors
    ".lbss",  # Little Endian section .bss (uninitialized data)
    # Primarily Linux-oriented, but sometimes present in PE e.g. in some old Watcom-compiled binaries
    "begtext",  # beginning of the text section
    "begdata",  # beginning of the data section
    "begbss",  # beginning of the bss section
    "endtext",  # end of the text section
    "enddata",  # end of the data section
    "endbss",  # end of the bss section
]

# https://github.com/avast/pelib/blob/9ce2427424a4bd5716310ff3eef881dbc2915ff8/include/pelib/PeLibAux.h#L259
IMAGE_SCN_CNT_CODE = 0x00000020
IMAGE_SCN_CNT_INITIALIZED_DATA = 0x00000040
IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080
IMAGE_SCN_LNK_INFO = 0x00000200
IMAGE_SCN_MEM_DISCARDABLE = 0x02000000
IMAGE_SCN_MEM_EXECUTE = 0x20000000
IMAGE_SCN_MEM_READ = 0x40000000
IMAGE_SCN_MEM_WRITE = 0x80000000

# https://github.com/avast/retdec/blob/071852bbc9619342ce2409ce3241124526a3f0a0/src/fileformat/file_format/pe/pe_format.cpp#L430
USUSAL_SECTION_CHARACTERISTICS = {
    ".bss": (
        IMAGE_SCN_CNT_UNINITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".cormeta": IMAGE_SCN_LNK_INFO,
    ".data": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".debug": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_DISCARDABLE
    ),
    ".drective": IMAGE_SCN_LNK_INFO,
    ".edata": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
    ".idata": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".idlsym": IMAGE_SCN_LNK_INFO,
    ".pdata": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
    ".rdata": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
    ".reloc": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_DISCARDABLE
    ),
    ".rsrc": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
    ".sbss": (
        IMAGE_SCN_CNT_UNINITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".sdata": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".srdata": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
    ".sxdata": IMAGE_SCN_LNK_INFO,
    ".text": (IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ),
    ".tls": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".tls$": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".vsdata": (
        IMAGE_SCN_CNT_INITIALIZED_DATA
        | IMAGE_SCN_MEM_READ
        | IMAGE_SCN_MEM_WRITE
    ),
    ".xdata": (IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ),
}


@functools.lru_cache(maxsize=32)
def load_pefile_pe(filepath: str, retry: int = 10) -> T.Optional[pefile.PE]:
    if retry <= 0:
        return None

    try:
        return pefile.PE(filepath, fast_load=True)
    except pefile.PEFormatError:
        return None
    except IOError as e:
        if e.errno == errno.EMFILE:  # Too many open files
            print(e)
            time.sleep(2)
            return load_pefile_pe(filepath, retry - 1)


@functools.lru_cache(maxsize=32)
def load_lief_pe(filepath: str) -> T.Optional[T.Any]:
    if not lief.PE.is_pe(filepath):
        return None

    return lief.PE.parse(filepath)


@functools.lru_cache(maxsize=32)
def get_sections(filepath: str) -> T.Optional[T.List[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    return [
        (
            section.Name,
            section.VirtualAddress,
            section.SizeOfRawData,
            section.Misc_VirtualSize,
            section.Characteristics,
            section.get_entropy(),
            section.get_hash_md5(),
        )
        for section in pe.sections
    ]


@functools.lru_cache(maxsize=32)
def get_packers(filepath: str) -> T.Optional[T.List[str]]:
    if (sections := get_sections(filepath)) is None:
        return []

    candidates = []
    for name, _va, _rs, _vs, _char, _ent, _md5 in sections:
        section_name = "".join(
            (map(chr, itertools.takewhile(lambda x: x, name)))
        )
        if section_name in PACKER_SECTIONS.keys():
            candidates.append(PACKER_SECTIONS[section_name])

    return list(set(candidates))


@functools.lru_cache(maxsize=32)
def get_imports(filepath: str) -> T.Optional[T.List[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories(
        directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_IMPORT"]]
    )
    if not hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
        return None

    return [
        (entry.dll, imp.address, imp.name)
        for entry in pe.DIRECTORY_ENTRY_IMPORT
        for imp in entry.imports
    ]


@functools.lru_cache(maxsize=32)
def get_imports_hash(filepath: str) -> T.Optional[str]:
    """
    https://www.mandiant.com/resources/blog/tracking-malware-import-hashing
    """
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories(
        directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_IMPORT"]]
    )
    if not hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
        return None

    return str(pe.get_imphash())


@functools.lru_cache(maxsize=32)
def get_exports(filepath: str) -> T.Optional[T.List[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories(
        directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_EXPORT"]]
    )
    if not hasattr(pe, "DIRECTORY_ENTRY_EXPORT"):
        return None

    return [
        [pe.OPTIONAL_HEADER.ImageBase + exp.address, exp.ordinal, exp.name]
        for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols
    ]


def get_stamps(filepath: str) -> T.Optional[T.Dict[str, int]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories()
    acc = {
        "FILE_HEADER": int(
            pe.FILE_HEADER.dump_dict()["TimeDateStamp"]["Value"].split()[0], 16
        ),
    }

    for directory_name in (
        "DIRECTORY_ENTRY_IMPORT",
        "DELAY_IMPORT_DESCRIPTOR",
        "DIRECTORY_ENTRY_BOUND_IMPORT",  # + IMAGE_BOUND_FORWARDER_REF
        "DIRECTORY_ENTRY_EXPORT",
        "DIRECTORY_ENTRY_RESOURCE",
        "DIRECTORY_ENTRY_LOAD_CONFIG",
        "DIRECTORY_ENTRY_DEBUG",
    ):
        if hasattr(pe, directory_name):
            directory = getattr(pe, directory_name)
            if type(directory) is list:
                for idx, dir_entry in enumerate(directory):
                    acc[
                        f"{directory_name} > {dir_entry.__class__.__name__} #{idx}"
                    ] = int(dir_entry.struct.TimeDateStamp)
            else:
                acc[directory_name] = int(
                    getattr(pe, directory_name).struct.TimeDateStamp
                )

    return acc


@functools.lru_cache(maxsize=32)
def get_rich_header(filepath: str) -> T.Optional[T.List[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    if (rich_header := pe.parse_rich_header()) is None:
        return None

    acc = []
    for comp_id, count in zip(
        rich_header["values"][::2], rich_header["values"][1::2]
    ):
        version = comp_id & 0xFFFF
        product_id = (comp_id & 0xFFFF0000) >> 0x10
        product = "Unknown"
        if product_id in KNOWN_PRODUCT_IDS:
            product = KNOWN_PRODUCT_IDS[product_id]

        if (vs := vs_version(comp_id)) is None:
            vs = vs_version_fallback(product_id)

        acc += [(product_id, product, version, count, vs)]

    return acc


def _resource(
    pe: pefile.PE,
    r: pefile.ResourceDirEntryData,
    parents: T.List[pefile.ResourceDataEntryData] = [],
    acc: T.List[T.Any] = [],
) -> T.List[T.Any]:
    if hasattr(r, "data"):
        return acc + [
            "-".join(parents + [str(r.id)]),
            r.name or "Unknown",
            r.data.struct.Size,
            r.data.struct.OffsetToData,
            pefile.LANG.get(r.data.lang, "Unknown"),
            pefile.get_sublang_name_for_lang(r.data.lang, r.data.sublang),
        ]

    if r.name:
        parents += [str(r.name)]
    else:
        parents += [str(r.id)]

    for entry in r.directory.entries:
        return _resource(pe, entry, parents, acc)


@functools.lru_cache(maxsize=32)
def get_resources(filepath: str) -> T.Optional[T.List[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories(
        directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_RESOURCE"]]
    )
    if not hasattr(pe, "DIRECTORY_ENTRY_RESOURCE"):
        return None

    return [
        _resource(pe, entry) for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries
    ]


@functools.lru_cache(maxsize=32)
def get_resources_section(filepath: str) -> T.Optional[pefile.ResourceDirData]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    pe.parse_data_directories(
        directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_RESOURCE"]]
    )
    if not hasattr(pe, "DIRECTORY_ENTRY_RESOURCE"):
        return None

    return pe.DIRECTORY_ENTRY_RESOURCE


@functools.lru_cache(maxsize=32)
def get_optional_header(filepath: str) -> T.Optional[pefile.Structure]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    return pe.OPTIONAL_HEADER


@functools.lru_cache(maxsize=32)
def get_size_of_optional_header(filepath: str) -> int:
    """
    Size of the OptionalHeader AND the data directories which follows this header.
    This value is equivalent to: sizeof(pe_optional_header) + NB_DATA_DIR * sizeof(data_directory)
    This size should be either:
    * 0xE0 (224) for a PE32 (32 bits)
    * 0xF0 (240) for a PE32+ (64 bits)
    """
    pe = load_lief_pe(filepath)
    if not hasattr(pe, "header"):
        return 0

    return pe.header.sizeof_optional_header  # type: ignore


@functools.lru_cache(maxsize=32)
def get_header_infos(filepath: str) -> T.Optional[T.Dict[str, int]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None

    return {
        value: getattr(pe.OPTIONAL_HEADER, value)
        for value in [
            "Magic",
            "MajorOperatingSystemVersion",
            "MinorOperatingSystemVersion",
            "MajorImageVersion",
            "MinorImageVersion",
            "MajorLinkerVersion",
            "MinorLinkerVersion",
            "AddressOfEntryPoint",
            "SizeOfImage",
            "SizeOfHeaders",
            "SizeOfCode",
            "BaseOfCode",
            "BaseOfData",
            "SizeOfStackReserve",
            "SizeOfStackCommit",
            "SizeOfHeapReserve",
            "SizeOfHeapCommit",
            "CheckSum",
        ]
        if hasattr(pe.OPTIONAL_HEADER, value)
    }


@functools.lru_cache(maxsize=32)
def get_subsystem(
    filepath: str,
) -> T.Tuple[T.Optional[T.Any], T.Optional[T.Any]]:
    if (pe := load_pefile_pe(filepath)) is None:
        return None, None

    if not hasattr(pe.OPTIONAL_HEADER, "Subsystem"):
        return None, None

    if pe.OPTIONAL_HEADER.Subsystem in pefile.SUBSYSTEM_TYPE:
        return (
            pe.OPTIONAL_HEADER.Subsystem,
            pefile.SUBSYSTEM_TYPE[pe.OPTIONAL_HEADER.Subsystem],
        )

    return pe.OPTIONAL_HEADER.Subsystem, None


@functools.lru_cache(maxsize=32)
def has_valid_checksum(filepath: str) -> bool:
    if (pe := load_pefile_pe(filepath)) is None:
        return False

    return bool(pe.verify_checksum())


def in_imports_list(
    filepath: str, watchdir: T.Dict[str, T.List[str]]
) -> T.Optional[T.List[T.Tuple[str, str]]]:
    if (imports := get_imports(filepath)) is None:
        return None

    ret = []
    for dll, _, function in imports:
        if dll.lower() not in watchdir:
            continue

        if function in watchdir[dll.lower()]:
            ret.append((dll, function))

    return ret
